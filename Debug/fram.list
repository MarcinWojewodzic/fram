
fram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050b4  080050b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080050b4  080050b4  000150b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050bc  080050bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050bc  080050bc  000150bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050c0  080050c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080050c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003be8  20000070  08005134  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c58  08005134  00023c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9da  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201a  00000000  00000000  0002aa7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002ca98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  0002d418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018499  00000000  00000000  0002dc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0c1  00000000  00000000  00046109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092bed  00000000  00000000  000521ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4db7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd8  00000000  00000000  000e4e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c88 	.word	0x08004c88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004c88 	.word	0x08004c88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	font = font_t;
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <GFX_SetFont+0x1c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6013      	str	r3, [r2, #0]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	2000008c 	.word	0x2000008c

080005a4 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08c      	sub	sp, #48	; 0x30
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
 80005b0:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80005b2:	683a      	ldr	r2, [r7, #0]
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005bc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005c0:	6879      	ldr	r1, [r7, #4]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	1acb      	subs	r3, r1, r3
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	bfb8      	it	lt
 80005ca:	425b      	neglt	r3, r3
 80005cc:	429a      	cmp	r2, r3
 80005ce:	bfcc      	ite	gt
 80005d0:	2301      	movgt	r3, #1
 80005d2:	2300      	movle	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80005d8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00b      	beq.n	80005f8 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ea:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	623b      	str	r3, [r7, #32]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	6a3b      	ldr	r3, [r7, #32]
 80005f6:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dd0b      	ble.n	8000618 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	61fb      	str	r3, [r7, #28]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	61bb      	str	r3, [r7, #24]
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	b29a      	uxth	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	b29b      	uxth	r3, r3
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	b29b      	uxth	r3, r3
 8000624:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	bfb8      	it	lt
 8000630:	425b      	neglt	r3, r3
 8000632:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8000634:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000638:	0fda      	lsrs	r2, r3, #31
 800063a:	4413      	add	r3, r2
 800063c:	105b      	asrs	r3, r3, #1
 800063e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	429a      	cmp	r2, r3
 8000646:	da02      	bge.n	800064e <GFX_WriteLine+0xaa>
	        ystep = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800064c:	e030      	b.n	80006b0 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 800064e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000652:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8000654:	e02c      	b.n	80006b0 <GFX_WriteLine+0x10c>
	        if (steep) {
 8000656:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800065a:	2b00      	cmp	r3, #0
 800065c:	d009      	beq.n	8000672 <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	b29b      	uxth	r3, r3
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	b291      	uxth	r1, r2
 8000666:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f9aa 	bl	80009c4 <e_papier_set_pixel>
 8000670:	e008      	b.n	8000684 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	b29b      	uxth	r3, r3
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	b291      	uxth	r1, r2
 800067a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f9a0 	bl	80009c4 <e_papier_set_pixel>
	        }
	        err -= dy;
 8000684:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000686:	8abb      	ldrh	r3, [r7, #20]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	b29b      	uxth	r3, r3
 800068c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800068e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000692:	2b00      	cmp	r3, #0
 8000694:	da09      	bge.n	80006aa <GFX_WriteLine+0x106>
	            y_start += ystep;
 8000696:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	4413      	add	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80006a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80006a2:	8afb      	ldrh	r3, [r7, #22]
 80006a4:	4413      	add	r3, r2
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3301      	adds	r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	ddce      	ble.n	8000656 <GFX_WriteLine+0xb2>
	        }
	    }
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	3730      	adds	r7, #48	; 0x30
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b086      	sub	sp, #24
 80006c6:	af02      	add	r7, sp, #8
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	1e5a      	subs	r2, r3, #1
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	4613      	mov	r3, r2
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	68b9      	ldr	r1, [r7, #8]
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f7ff ff5e 	bl	80005a4 <GFX_WriteLine>
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	1e5a      	subs	r2, r3, #1
 8000706:	78fb      	ldrb	r3, [r7, #3]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	68b9      	ldr	r1, [r7, #8]
 800070e:	68f8      	ldr	r0, [r7, #12]
 8000710:	f7ff ff48 	bl	80005a4 <GFX_WriteLine>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af02      	add	r7, sp, #8
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	429a      	cmp	r2, r3
 8000730:	d114      	bne.n	800075c <GFX_DrawLine+0x40>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	429a      	cmp	r2, r3
 8000738:	dd05      	ble.n	8000746 <GFX_DrawLine+0x2a>
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8000746:	683a      	ldr	r2, [r7, #0]
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000752:	68b9      	ldr	r1, [r7, #8]
 8000754:	68f8      	ldr	r0, [r7, #12]
 8000756:	f7ff ffb4 	bl	80006c2 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 800075a:	e021      	b.n	80007a0 <GFX_DrawLine+0x84>
	    } else if(y_start == y_end){
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	429a      	cmp	r2, r3
 8000762:	d114      	bne.n	800078e <GFX_DrawLine+0x72>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	429a      	cmp	r2, r3
 800076a:	dd05      	ble.n	8000778 <GFX_DrawLine+0x5c>
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	f7ff ffb2 	bl	80006f0 <GFX_DrawFastHLine>
}
 800078c:	e008      	b.n	80007a0 <GFX_DrawLine+0x84>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 800078e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f7ff ff02 	bl	80005a4 <GFX_WriteLine>
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_ADC1_Init+0x98>)
 80007bc:	4a21      	ldr	r2, [pc, #132]	; (8000844 <MX_ADC1_Init+0x9c>)
 80007be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_ADC1_Init+0x98>)
 80007c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_ADC1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_ADC1_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_ADC1_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_ADC1_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_ADC1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_ADC1_Init+0x98>)
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <MX_ADC1_Init+0xa0>)
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_ADC1_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_ADC1_Init+0x98>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_ADC1_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_ADC1_Init+0x98>)
 8000804:	2201      	movs	r2, #1
 8000806:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <MX_ADC1_Init+0x98>)
 800080a:	f001 f93f 	bl	8001a8c <HAL_ADC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000814:	f000 fe20 	bl	8001458 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000818:	2305      	movs	r3, #5
 800081a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800081c:	2301      	movs	r3, #1
 800081e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_ADC1_Init+0x98>)
 800082a:	f001 fabf 	bl	8001dac <HAL_ADC_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000834:	f000 fe10 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000090 	.word	0x20000090
 8000844:	40012000 	.word	0x40012000
 8000848:	0f000001 	.word	0x0f000001

0800084c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <HAL_ADC_MspInit+0x7c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d127      	bne.n	80008be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <HAL_ADC_MspInit+0x80>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <HAL_ADC_MspInit+0x80>)
 8000878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <HAL_ADC_MspInit+0x80>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_ADC_MspInit+0x80>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <HAL_ADC_MspInit+0x80>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_ADC_MspInit+0x80>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008a6:	2320      	movs	r3, #32
 80008a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008aa:	2303      	movs	r3, #3
 80008ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <HAL_ADC_MspInit+0x84>)
 80008ba:	f001 fd8b 	bl	80023d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40012000 	.word	0x40012000
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000

080008d4 <e_papier_reset>:
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
void e_papier_reset(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(e_papier_rst_GPIO_Port, e_papier_rst_Pin, 1);
 80008d8:	2201      	movs	r2, #1
 80008da:	2102      	movs	r1, #2
 80008dc:	480b      	ldr	r0, [pc, #44]	; (800090c <e_papier_reset+0x38>)
 80008de:	f001 ff15 	bl	800270c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80008e2:	20c8      	movs	r0, #200	; 0xc8
 80008e4:	f001 f8ae 	bl	8001a44 <HAL_Delay>
	HAL_GPIO_WritePin(e_papier_rst_GPIO_Port, e_papier_rst_Pin, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2102      	movs	r1, #2
 80008ec:	4807      	ldr	r0, [pc, #28]	; (800090c <e_papier_reset+0x38>)
 80008ee:	f001 ff0d 	bl	800270c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80008f2:	20c8      	movs	r0, #200	; 0xc8
 80008f4:	f001 f8a6 	bl	8001a44 <HAL_Delay>
	HAL_GPIO_WritePin(e_papier_rst_GPIO_Port, e_papier_rst_Pin, 1);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2102      	movs	r1, #2
 80008fc:	4803      	ldr	r0, [pc, #12]	; (800090c <e_papier_reset+0x38>)
 80008fe:	f001 ff05 	bl	800270c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000902:	20c8      	movs	r0, #200	; 0xc8
 8000904:	f001 f89e 	bl	8001a44 <HAL_Delay>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40020400 	.word	0x40020400

08000910 <e_papier_send_command>:
void e_papier_send_command(uint8_t command)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(e_papier_dc_GPIO_Port, e_papier_dc_Pin, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	480c      	ldr	r0, [pc, #48]	; (8000950 <e_papier_send_command+0x40>)
 8000920:	f001 fef4 	bl	800270c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_papier_cs_GPIO_Port, e_papier_cs_Pin, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2110      	movs	r1, #16
 8000928:	4809      	ldr	r0, [pc, #36]	; (8000950 <e_papier_send_command+0x40>)
 800092a:	f001 feef 	bl	800270c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(e_papier_spi, &command, 1, 1000);
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <e_papier_send_command+0x44>)
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	1df9      	adds	r1, r7, #7
 8000934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000938:	2201      	movs	r2, #1
 800093a:	f002 fbee 	bl	800311a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(e_papier_cs_GPIO_Port, e_papier_cs_Pin, 1);
 800093e:	2201      	movs	r2, #1
 8000940:	2110      	movs	r1, #16
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <e_papier_send_command+0x40>)
 8000944:	f001 fee2 	bl	800270c <HAL_GPIO_WritePin>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40020800 	.word	0x40020800
 8000954:	200000d8 	.word	0x200000d8

08000958 <e_papier_send_data>:
void e_papier_send_data(uint8_t data)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(e_papier_dc_GPIO_Port, e_papier_dc_Pin, 1);
 8000962:	2201      	movs	r2, #1
 8000964:	2120      	movs	r1, #32
 8000966:	480c      	ldr	r0, [pc, #48]	; (8000998 <e_papier_send_data+0x40>)
 8000968:	f001 fed0 	bl	800270c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_papier_cs_GPIO_Port, e_papier_cs_Pin, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2110      	movs	r1, #16
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <e_papier_send_data+0x40>)
 8000972:	f001 fecb 	bl	800270c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(e_papier_spi, &data, 1, 1000);
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <e_papier_send_data+0x44>)
 8000978:	6818      	ldr	r0, [r3, #0]
 800097a:	1df9      	adds	r1, r7, #7
 800097c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000980:	2201      	movs	r2, #1
 8000982:	f002 fbca 	bl	800311a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(e_papier_cs_GPIO_Port, e_papier_cs_Pin, 1);
 8000986:	2201      	movs	r2, #1
 8000988:	2110      	movs	r1, #16
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <e_papier_send_data+0x40>)
 800098c:	f001 febe 	bl	800270c <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40020800 	.word	0x40020800
 800099c:	200000d8 	.word	0x200000d8

080009a0 <e_papier_wait_until_idle>:
void e_papier_wait_until_idle(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(e_papier_busy_GPIO_Port, e_papier_busy_Pin)==0)
 80009a4:	e002      	b.n	80009ac <e_papier_wait_until_idle+0xc>
	{
		HAL_Delay(100);
 80009a6:	2064      	movs	r0, #100	; 0x64
 80009a8:	f001 f84c 	bl	8001a44 <HAL_Delay>
	while(HAL_GPIO_ReadPin(e_papier_busy_GPIO_Port, e_papier_busy_Pin)==0)
 80009ac:	2104      	movs	r1, #4
 80009ae:	4804      	ldr	r0, [pc, #16]	; (80009c0 <e_papier_wait_until_idle+0x20>)
 80009b0:	f001 fe94 	bl	80026dc <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f5      	beq.n	80009a6 <e_papier_wait_until_idle+0x6>
	}
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40020400 	.word	0x40020400

080009c4 <e_papier_set_pixel>:
void e_papier_set_pixel(uint16_t x,uint16_t y, color_t color)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	460b      	mov	r3, r1
 80009d0:	80bb      	strh	r3, [r7, #4]
 80009d2:	4613      	mov	r3, r2
 80009d4:	70fb      	strb	r3, [r7, #3]
	if(x>=EPD_WIDTH||x<0||y>=EPD_HEIGHT||y<0)
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80009dc:	d247      	bcs.n	8000a6e <e_papier_set_pixel+0xaa>
 80009de:	88bb      	ldrh	r3, [r7, #4]
 80009e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009e4:	d243      	bcs.n	8000a6e <e_papier_set_pixel+0xaa>
	{
		return;
	}
	if(color==WHITE)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d120      	bne.n	8000a2e <e_papier_set_pixel+0x6a>
	{
		buffer[x/8+y*EPD_WIDTH/8]|=(0x80>(x%8));
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	08db      	lsrs	r3, r3, #3
 80009f0:	b299      	uxth	r1, r3
 80009f2:	4608      	mov	r0, r1
 80009f4:	88bb      	ldrh	r3, [r7, #4]
 80009f6:	2232      	movs	r2, #50	; 0x32
 80009f8:	fb02 f303 	mul.w	r3, r2, r3
 80009fc:	4403      	add	r3, r0
 80009fe:	4a1f      	ldr	r2, [pc, #124]	; (8000a7c <e_papier_set_pixel+0xb8>)
 8000a00:	5cd3      	ldrb	r3, [r2, r3]
 8000a02:	b25a      	sxtb	r2, r3
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0e:	bf94      	ite	ls
 8000a10:	2301      	movls	r3, #1
 8000a12:	2300      	movhi	r3, #0
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	b258      	sxtb	r0, r3
 8000a1c:	88bb      	ldrh	r3, [r7, #4]
 8000a1e:	2232      	movs	r2, #50	; 0x32
 8000a20:	fb02 f303 	mul.w	r3, r2, r3
 8000a24:	440b      	add	r3, r1
 8000a26:	b2c1      	uxtb	r1, r0
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <e_papier_set_pixel+0xb8>)
 8000a2a:	54d1      	strb	r1, [r2, r3]
 8000a2c:	e020      	b.n	8000a70 <e_papier_set_pixel+0xac>
	}
	else
	{
		buffer[x/8+y*EPD_WIDTH/8]&=~(0x80>>(x%8));
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	08db      	lsrs	r3, r3, #3
 8000a32:	b298      	uxth	r0, r3
 8000a34:	4601      	mov	r1, r0
 8000a36:	88bb      	ldrh	r3, [r7, #4]
 8000a38:	2232      	movs	r2, #50	; 0x32
 8000a3a:	fb02 f303 	mul.w	r3, r2, r3
 8000a3e:	440b      	add	r3, r1
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <e_papier_set_pixel+0xb8>)
 8000a42:	5cd3      	ldrb	r3, [r2, r3]
 8000a44:	b25a      	sxtb	r2, r3
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	f003 0307 	and.w	r3, r3, #7
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	fa41 f303 	asr.w	r3, r1, r3
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	4013      	ands	r3, r2
 8000a5a:	b259      	sxtb	r1, r3
 8000a5c:	88bb      	ldrh	r3, [r7, #4]
 8000a5e:	2232      	movs	r2, #50	; 0x32
 8000a60:	fb02 f303 	mul.w	r3, r2, r3
 8000a64:	4403      	add	r3, r0
 8000a66:	b2c9      	uxtb	r1, r1
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <e_papier_set_pixel+0xb8>)
 8000a6a:	54d1      	strb	r1, [r2, r3]
 8000a6c:	e000      	b.n	8000a70 <e_papier_set_pixel+0xac>
		return;
 8000a6e:	bf00      	nop
	}
}
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	200000dc 	.word	0x200000dc

08000a80 <e_papier_set_lut>:
void e_papier_set_lut(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
    uint16_t count;
    e_papier_send_command(LUT_FOR_VCOM);         //g vcom
 8000a86:	2020      	movs	r0, #32
 8000a88:	f7ff ff42 	bl	8000910 <e_papier_send_command>
    for(count=0; count<44; count++) {
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	80fb      	strh	r3, [r7, #6]
 8000a90:	e008      	b.n	8000aa4 <e_papier_set_lut+0x24>
        e_papier_send_data(lut_vcom0[count]);
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	4a2b      	ldr	r2, [pc, #172]	; (8000b44 <e_papier_set_lut+0xc4>)
 8000a96:	5cd3      	ldrb	r3, [r2, r3]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff5d 	bl	8000958 <e_papier_send_data>
    for(count=0; count<44; count++) {
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	80fb      	strh	r3, [r7, #6]
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	2b2b      	cmp	r3, #43	; 0x2b
 8000aa8:	d9f3      	bls.n	8000a92 <e_papier_set_lut+0x12>
    }

    e_papier_send_command(LUT_WHITE_TO_WHITE);
 8000aaa:	2021      	movs	r0, #33	; 0x21
 8000aac:	f7ff ff30 	bl	8000910 <e_papier_send_command>
    for(count=0; count<42; count++) {
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	e008      	b.n	8000ac8 <e_papier_set_lut+0x48>
        e_papier_send_data(lut_ww[count]);
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <e_papier_set_lut+0xc8>)
 8000aba:	5cd3      	ldrb	r3, [r2, r3]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff4b 	bl	8000958 <e_papier_send_data>
    for(count=0; count<42; count++) {
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	80fb      	strh	r3, [r7, #6]
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	2b29      	cmp	r3, #41	; 0x29
 8000acc:	d9f3      	bls.n	8000ab6 <e_papier_set_lut+0x36>
    }

    e_papier_send_command(LUT_BLACK_TO_WHITE);
 8000ace:	2022      	movs	r0, #34	; 0x22
 8000ad0:	f7ff ff1e 	bl	8000910 <e_papier_send_command>
    for(count=0; count<42; count++) {
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	80fb      	strh	r3, [r7, #6]
 8000ad8:	e008      	b.n	8000aec <e_papier_set_lut+0x6c>
        e_papier_send_data(lut_bw[count]);
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	4a1b      	ldr	r2, [pc, #108]	; (8000b4c <e_papier_set_lut+0xcc>)
 8000ade:	5cd3      	ldrb	r3, [r2, r3]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff39 	bl	8000958 <e_papier_send_data>
    for(count=0; count<42; count++) {
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	80fb      	strh	r3, [r7, #6]
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	2b29      	cmp	r3, #41	; 0x29
 8000af0:	d9f3      	bls.n	8000ada <e_papier_set_lut+0x5a>
    }

    e_papier_send_command(LUT_WHITE_TO_BLACK);
 8000af2:	2023      	movs	r0, #35	; 0x23
 8000af4:	f7ff ff0c 	bl	8000910 <e_papier_send_command>
    for(count=0; count<42; count++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	80fb      	strh	r3, [r7, #6]
 8000afc:	e008      	b.n	8000b10 <e_papier_set_lut+0x90>
        e_papier_send_data(lut_wb[count]);
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <e_papier_set_lut+0xd0>)
 8000b02:	5cd3      	ldrb	r3, [r2, r3]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff27 	bl	8000958 <e_papier_send_data>
    for(count=0; count<42; count++) {
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	80fb      	strh	r3, [r7, #6]
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	2b29      	cmp	r3, #41	; 0x29
 8000b14:	d9f3      	bls.n	8000afe <e_papier_set_lut+0x7e>
    }

    e_papier_send_command(LUT_BLACK_TO_BLACK);
 8000b16:	2024      	movs	r0, #36	; 0x24
 8000b18:	f7ff fefa 	bl	8000910 <e_papier_send_command>
    for(count=0; count<42; count++) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	80fb      	strh	r3, [r7, #6]
 8000b20:	e008      	b.n	8000b34 <e_papier_set_lut+0xb4>
        e_papier_send_data(lut_bb[count]);
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <e_papier_set_lut+0xd4>)
 8000b26:	5cd3      	ldrb	r3, [r2, r3]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff15 	bl	8000958 <e_papier_send_data>
    for(count=0; count<42; count++) {
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	3301      	adds	r3, #1
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	2b29      	cmp	r3, #41	; 0x29
 8000b38:	d9f3      	bls.n	8000b22 <e_papier_set_lut+0xa2>
    }
}
 8000b3a:	bf00      	nop
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	08004ca0 	.word	0x08004ca0
 8000b48:	08004ccc 	.word	0x08004ccc
 8000b4c:	08004cf8 	.word	0x08004cf8
 8000b50:	08004d24 	.word	0x08004d24
 8000b54:	08004d50 	.word	0x08004d50

08000b58 <e_papier_clear>:
void e_papier_clear(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	memset(buffer,0xff,EPD_HEIGHT*EPD_WIDTH/8);
 8000b5c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000b60:	21ff      	movs	r1, #255	; 0xff
 8000b62:	4802      	ldr	r0, [pc, #8]	; (8000b6c <e_papier_clear+0x14>)
 8000b64:	f003 f822 	bl	8003bac <memset>
	//e_papier_wait_until_idle();
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200000dc 	.word	0x200000dc

08000b70 <e_papier_turn_on_display>:
void e_papier_turn_on_display(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	e_papier_send_command(DISPLAY_REFRESH);
 8000b74:	2012      	movs	r0, #18
 8000b76:	f7ff fecb 	bl	8000910 <e_papier_send_command>
    //HAL_Delay(100);
    e_papier_wait_until_idle();
 8000b7a:	f7ff ff11 	bl	80009a0 <e_papier_wait_until_idle>
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <e_papier_display>:
void e_papier_display(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
	uint16_t Width, Height;
    Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
 8000b8a:	2332      	movs	r3, #50	; 0x32
 8000b8c:	80fb      	strh	r3, [r7, #6]
    Height = EPD_HEIGHT;
 8000b8e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000b92:	80bb      	strh	r3, [r7, #4]

    e_papier_send_command(DATA_START_TRANSMISSION_1);
 8000b94:	2010      	movs	r0, #16
 8000b96:	f7ff febb 	bl	8000910 <e_papier_send_command>
    for (uint16_t j = 0; j < Height; j++) {
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	81fb      	strh	r3, [r7, #14]
 8000b9e:	e00f      	b.n	8000bc0 <e_papier_display+0x3c>
        for (uint16_t i = 0; i < Width; i++) {
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	81bb      	strh	r3, [r7, #12]
 8000ba4:	e005      	b.n	8000bb2 <e_papier_display+0x2e>
        	e_papier_send_data(0XFF);
 8000ba6:	20ff      	movs	r0, #255	; 0xff
 8000ba8:	f7ff fed6 	bl	8000958 <e_papier_send_data>
        for (uint16_t i = 0; i < Width; i++) {
 8000bac:	89bb      	ldrh	r3, [r7, #12]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	81bb      	strh	r3, [r7, #12]
 8000bb2:	89ba      	ldrh	r2, [r7, #12]
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d3f5      	bcc.n	8000ba6 <e_papier_display+0x22>
    for (uint16_t j = 0; j < Height; j++) {
 8000bba:	89fb      	ldrh	r3, [r7, #14]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	81fb      	strh	r3, [r7, #14]
 8000bc0:	89fa      	ldrh	r2, [r7, #14]
 8000bc2:	88bb      	ldrh	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d3eb      	bcc.n	8000ba0 <e_papier_display+0x1c>
        }
    }
    e_papier_send_command(DATA_START_TRANSMISSION_2);
 8000bc8:	2013      	movs	r0, #19
 8000bca:	f7ff fea1 	bl	8000910 <e_papier_send_command>
    for (uint16_t j = 0; j < Height; j++) {
 8000bce:	2300      	movs	r3, #0
 8000bd0:	817b      	strh	r3, [r7, #10]
 8000bd2:	e017      	b.n	8000c04 <e_papier_display+0x80>
        for (uint16_t i = 0; i < Width; i++) {
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	813b      	strh	r3, [r7, #8]
 8000bd8:	e00d      	b.n	8000bf6 <e_papier_display+0x72>
        	e_papier_send_data(buffer[i + j * Width]);
 8000bda:	893a      	ldrh	r2, [r7, #8]
 8000bdc:	897b      	ldrh	r3, [r7, #10]
 8000bde:	88f9      	ldrh	r1, [r7, #6]
 8000be0:	fb01 f303 	mul.w	r3, r1, r3
 8000be4:	4413      	add	r3, r2
 8000be6:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <e_papier_display+0x98>)
 8000be8:	5cd3      	ldrb	r3, [r2, r3]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff feb4 	bl	8000958 <e_papier_send_data>
        for (uint16_t i = 0; i < Width; i++) {
 8000bf0:	893b      	ldrh	r3, [r7, #8]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	813b      	strh	r3, [r7, #8]
 8000bf6:	893a      	ldrh	r2, [r7, #8]
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d3ed      	bcc.n	8000bda <e_papier_display+0x56>
    for (uint16_t j = 0; j < Height; j++) {
 8000bfe:	897b      	ldrh	r3, [r7, #10]
 8000c00:	3301      	adds	r3, #1
 8000c02:	817b      	strh	r3, [r7, #10]
 8000c04:	897a      	ldrh	r2, [r7, #10]
 8000c06:	88bb      	ldrh	r3, [r7, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d3e3      	bcc.n	8000bd4 <e_papier_display+0x50>
        }
    }
    e_papier_turn_on_display();
 8000c0c:	f7ff ffb0 	bl	8000b70 <e_papier_turn_on_display>
    e_papier_wait_until_idle();
 8000c10:	f7ff fec6 	bl	80009a0 <e_papier_wait_until_idle>
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200000dc 	.word	0x200000dc

08000c20 <e_papier_init>:
void e_papier_init(SPI_HandleTypeDef *spi)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	e_papier_spi=spi;
 8000c28:	4a2d      	ldr	r2, [pc, #180]	; (8000ce0 <e_papier_init+0xc0>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
	e_papier_reset();
 8000c2e:	f7ff fe51 	bl	80008d4 <e_papier_reset>

    e_papier_send_command(POWER_SETTING);			//POWER SETTING
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff fe6c 	bl	8000910 <e_papier_send_command>
    e_papier_send_data(0x03);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f7ff fe8d 	bl	8000958 <e_papier_send_data>
    e_papier_send_data(0x00);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fe8a 	bl	8000958 <e_papier_send_data>
    e_papier_send_data(0x2b);
 8000c44:	202b      	movs	r0, #43	; 0x2b
 8000c46:	f7ff fe87 	bl	8000958 <e_papier_send_data>
    e_papier_send_data(0x2b);
 8000c4a:	202b      	movs	r0, #43	; 0x2b
 8000c4c:	f7ff fe84 	bl	8000958 <e_papier_send_data>

    e_papier_send_command(BOOSTER_SOFT_START);         //boost soft start
 8000c50:	2006      	movs	r0, #6
 8000c52:	f7ff fe5d 	bl	8000910 <e_papier_send_command>
    e_papier_send_data(0x17);		//A
 8000c56:	2017      	movs	r0, #23
 8000c58:	f7ff fe7e 	bl	8000958 <e_papier_send_data>
    e_papier_send_data(0x17);		//B
 8000c5c:	2017      	movs	r0, #23
 8000c5e:	f7ff fe7b 	bl	8000958 <e_papier_send_data>
    e_papier_send_data(0x17);		//C
 8000c62:	2017      	movs	r0, #23
 8000c64:	f7ff fe78 	bl	8000958 <e_papier_send_data>

    e_papier_send_command(POWER_ON);
 8000c68:	2004      	movs	r0, #4
 8000c6a:	f7ff fe51 	bl	8000910 <e_papier_send_command>
    e_papier_wait_until_idle();
 8000c6e:	f7ff fe97 	bl	80009a0 <e_papier_wait_until_idle>

    e_papier_send_command(PANEL_SETTING);			//panel setting
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fe4c 	bl	8000910 <e_papier_send_command>
    e_papier_send_data(0xbf);		//KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8000c78:	20bf      	movs	r0, #191	; 0xbf
 8000c7a:	f7ff fe6d 	bl	8000958 <e_papier_send_data>
    e_papier_send_data(0x0d);
 8000c7e:	200d      	movs	r0, #13
 8000c80:	f7ff fe6a 	bl	8000958 <e_papier_send_data>

    e_papier_send_command(PLL_CONTROL);			//PLL setting
 8000c84:	2030      	movs	r0, #48	; 0x30
 8000c86:	f7ff fe43 	bl	8000910 <e_papier_send_command>
    e_papier_send_data(0x3C);      	// 3A 100HZ   29 150Hz 39 200HZ	31 171HZ
 8000c8a:	203c      	movs	r0, #60	; 0x3c
 8000c8c:	f7ff fe64 	bl	8000958 <e_papier_send_data>

    e_papier_send_command(0x61);			//resolution setting
 8000c90:	2061      	movs	r0, #97	; 0x61
 8000c92:	f7ff fe3d 	bl	8000910 <e_papier_send_command>
    e_papier_send_data(0x01);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff fe5e 	bl	8000958 <e_papier_send_data>
    e_papier_send_data(0x90);       //128
 8000c9c:	2090      	movs	r0, #144	; 0x90
 8000c9e:	f7ff fe5b 	bl	8000958 <e_papier_send_data>
    e_papier_send_data(0x01);		//
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f7ff fe58 	bl	8000958 <e_papier_send_data>
    e_papier_send_data(0x2c);
 8000ca8:	202c      	movs	r0, #44	; 0x2c
 8000caa:	f7ff fe55 	bl	8000958 <e_papier_send_data>

    e_papier_send_command(0x82);			//vcom_DC setting
 8000cae:	2082      	movs	r0, #130	; 0x82
 8000cb0:	f7ff fe2e 	bl	8000910 <e_papier_send_command>
    e_papier_send_data(0x28);
 8000cb4:	2028      	movs	r0, #40	; 0x28
 8000cb6:	f7ff fe4f 	bl	8000958 <e_papier_send_data>

    e_papier_send_command(0X50);			//VCOM AND DATA INTERVAL SETTING
 8000cba:	2050      	movs	r0, #80	; 0x50
 8000cbc:	f7ff fe28 	bl	8000910 <e_papier_send_command>
    e_papier_send_data(0x97);		//97white border 77black border		VBDF 17|D7 VBDW 97 VBDB 57		VBDF F7 VBDW 77 VBDB 37  VBDR B7
 8000cc0:	2097      	movs	r0, #151	; 0x97
 8000cc2:	f7ff fe49 	bl	8000958 <e_papier_send_data>

    e_papier_set_lut();
 8000cc6:	f7ff fedb 	bl	8000a80 <e_papier_set_lut>
    memset(buffer,0xff,EPD_HEIGHT*EPD_WIDTH/8);
 8000cca:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000cce:	21ff      	movs	r1, #255	; 0xff
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <e_papier_init+0xc4>)
 8000cd2:	f002 ff6b 	bl	8003bac <memset>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000d8 	.word	0x200000d8
 8000ce4:	200000dc 	.word	0x200000dc

08000ce8 <fram_CsLow>:
#include "main.h"
#include "spi.h"
#include "gpio.h"
#include "fram.h"
void fram_CsLow(fram_t *fram)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 0);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6898      	ldr	r0, [r3, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	8a5b      	ldrh	r3, [r3, #18]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f001 fd06 	bl	800270c <HAL_GPIO_WritePin>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <fram_CsHigh>:
void fram_CsHigh(fram_t *fram)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 1);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6898      	ldr	r0, [r3, #8]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	8a5b      	ldrh	r3, [r3, #18]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f001 fcf6 	bl	800270c <HAL_GPIO_WritePin>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <fram_SetWELBit>:
void fram_SetWELBit(fram_t *fram)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	uint8_t com=WREN;
 8000d30:	2306      	movs	r3, #6
 8000d32:	73fb      	strb	r3, [r7, #15]
	fram_CsLow(fram);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ffd7 	bl	8000ce8 <fram_CsLow>
	HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	f107 010f 	add.w	r1, r7, #15
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	2201      	movs	r2, #1
 8000d48:	f002 f9e7 	bl	800311a <HAL_SPI_Transmit>
	fram_CsHigh(fram);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ffdb 	bl	8000d08 <fram_CsHigh>
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <fram_SetProtectedBlocs>:
void fram_SetProtectedBlocs(fram_t *fram,uint8_t blocs)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	70fb      	strb	r3, [r7, #3]
	if(blocs>3)
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d901      	bls.n	8000d70 <fram_SetProtectedBlocs+0x16>
	{
		blocs=3;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	70fb      	strb	r3, [r7, #3]
	}
	uint8_t data[2];
	data[0]=WRSR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	733b      	strb	r3, [r7, #12]
	data[1]=(blocs<<2);
 8000d74:	78fb      	ldrb	r3, [r7, #3]
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	737b      	strb	r3, [r7, #13]
	fram_SetWELBit(fram);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ffd3 	bl	8000d28 <fram_SetWELBit>
	fram_CsLow(fram);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff ffb0 	bl	8000ce8 <fram_CsLow>
	HAL_SPI_Transmit(fram->fram_spi, data, 2, 1000);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	f107 010c 	add.w	r1, r7, #12
 8000d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d94:	2202      	movs	r2, #2
 8000d96:	f002 f9c0 	bl	800311a <HAL_SPI_Transmit>
	fram_CsHigh(fram);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffb4 	bl	8000d08 <fram_CsHigh>
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <fram_ReadSreg>:
uint8_t fram_ReadSreg(fram_t *fram)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	fram_CsLow(fram);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff99 	bl	8000ce8 <fram_CsLow>
	uint8_t _sreg;
	uint8_t com=RDSR;
 8000db6:	2305      	movs	r3, #5
 8000db8:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6818      	ldr	r0, [r3, #0]
 8000dbe:	f107 010e 	add.w	r1, r7, #14
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f002 f9a7 	bl	800311a <HAL_SPI_Transmit>
	HAL_SPI_Receive(fram->fram_spi, &_sreg, 1, 1000);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	f107 010f 	add.w	r1, r7, #15
 8000dd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f002 fada 	bl	8003392 <HAL_SPI_Receive>
	fram_CsHigh(fram);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ff92 	bl	8000d08 <fram_CsHigh>
	return _sreg;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <fram_Write>:
void fram_Write(fram_t *fram,uint16_t addr,uint8_t *buff, uint16_t length)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	817b      	strh	r3, [r7, #10]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	813b      	strh	r3, [r7, #8]
	fram_SetWELBit(fram);
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f7ff ff90 	bl	8000d28 <fram_SetWELBit>
	uint8_t data[3];
	data[0]=WRITE;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	753b      	strb	r3, [r7, #20]
	data[1]=(addr&0xf0)>>8;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	757b      	strb	r3, [r7, #21]
	data[2]=addr&0x0f;
 8000e10:	897b      	ldrh	r3, [r7, #10]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f003 030f 	and.w	r3, r3, #15
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	75bb      	strb	r3, [r7, #22]
	fram_CsLow(fram);
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f7ff ff63 	bl	8000ce8 <fram_CsLow>
	HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6818      	ldr	r0, [r3, #0]
 8000e26:	f107 0114 	add.w	r1, r7, #20
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	2203      	movs	r2, #3
 8000e30:	f002 f973 	bl	800311a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(fram->fram_spi, buff, length, 1000);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	893a      	ldrh	r2, [r7, #8]
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f002 f96b 	bl	800311a <HAL_SPI_Transmit>
	fram_CsHigh(fram);
 8000e44:	68f8      	ldr	r0, [r7, #12]
 8000e46:	f7ff ff5f 	bl	8000d08 <fram_CsHigh>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <fram_Read>:
void fram_Read(fram_t *fram,uint16_t addr, uint8_t *buff, uint16_t length)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	460b      	mov	r3, r1
 8000e60:	817b      	strh	r3, [r7, #10]
 8000e62:	4613      	mov	r3, r2
 8000e64:	813b      	strh	r3, [r7, #8]
	fram_SetWELBit(fram);
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f7ff ff5e 	bl	8000d28 <fram_SetWELBit>
	uint8_t data[3];
	data[0]=READ;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	753b      	strb	r3, [r7, #20]
	data[1]=(addr&0xf0)>>8;
 8000e70:	2300      	movs	r3, #0
 8000e72:	757b      	strb	r3, [r7, #21]
	data[2]=addr&0x0f;
 8000e74:	897b      	ldrh	r3, [r7, #10]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	f003 030f 	and.w	r3, r3, #15
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	75bb      	strb	r3, [r7, #22]
	fram_CsLow(fram);
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f7ff ff31 	bl	8000ce8 <fram_CsLow>
	HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	f107 0114 	add.w	r1, r7, #20
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	2203      	movs	r2, #3
 8000e94:	f002 f941 	bl	800311a <HAL_SPI_Transmit>
	HAL_SPI_Receive(fram->fram_spi, buff, length, 1000);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	893a      	ldrh	r2, [r7, #8]
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f002 fa75 	bl	8003392 <HAL_SPI_Receive>
	fram_CsHigh(fram);
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f7ff ff2d 	bl	8000d08 <fram_CsHigh>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <fram_ReadID>:
uint32_t fram_ReadID(fram_t *fram)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b084      	sub	sp, #16
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	uint8_t com,id[4];
	com=RDID;
 8000ebe:	239f      	movs	r3, #159	; 0x9f
 8000ec0:	73fb      	strb	r3, [r7, #15]
	fram_CsLow(fram);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ff10 	bl	8000ce8 <fram_CsLow>
	HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	f107 010f 	add.w	r1, r7, #15
 8000ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f002 f920 	bl	800311a <HAL_SPI_Transmit>
	HAL_SPI_Receive(fram->fram_spi, id, 4, 1000);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6818      	ldr	r0, [r3, #0]
 8000ede:	f107 0108 	add.w	r1, r7, #8
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	f002 fa53 	bl	8003392 <HAL_SPI_Receive>
	fram_CsHigh(fram);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff0b 	bl	8000d08 <fram_CsHigh>
	return ((id[0]<<24)|(id[1]<<16)|(id[2]<<8)|id[3]);
 8000ef2:	7a3b      	ldrb	r3, [r7, #8]
 8000ef4:	061a      	lsls	r2, r3, #24
 8000ef6:	7a7b      	ldrb	r3, [r7, #9]
 8000ef8:	041b      	lsls	r3, r3, #16
 8000efa:	431a      	orrs	r2, r3
 8000efc:	7abb      	ldrb	r3, [r7, #10]
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	4313      	orrs	r3, r2
 8000f02:	7afa      	ldrb	r2, [r7, #11]
 8000f04:	4313      	orrs	r3, r2
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <fram_Init>:
void fram_Init(fram_t *fram,SPI_HandleTypeDef *spi,GPIO_TypeDef *_hold_port,GPIO_TypeDef *_cs_port,GPIO_TypeDef *_wp_port,uint16_t _hold_pin,uint16_t _cs_pin,uint16_t _wp_pin)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	60f8      	str	r0, [r7, #12]
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	603b      	str	r3, [r7, #0]
	fram->fram_spi=spi;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	601a      	str	r2, [r3, #0]
	fram->hold_port=_hold_port;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	605a      	str	r2, [r3, #4]
	fram->hold_pin=_hold_pin;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	8bba      	ldrh	r2, [r7, #28]
 8000f2c:	821a      	strh	r2, [r3, #16]
	fram->cs_port=_cs_port;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	609a      	str	r2, [r3, #8]
	fram->cs_pin=_cs_pin;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	8c3a      	ldrh	r2, [r7, #32]
 8000f38:	825a      	strh	r2, [r3, #18]
	fram->wp_port=_wp_port;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	60da      	str	r2, [r3, #12]
	fram->wp_pin=_wp_pin;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f44:	829a      	strh	r2, [r3, #20]
	HAL_GPIO_WritePin(fram->hold_port, fram->hold_pin, 1);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6858      	ldr	r0, [r3, #4]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	8a1b      	ldrh	r3, [r3, #16]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4619      	mov	r1, r3
 8000f52:	f001 fbdb 	bl	800270c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fram->wp_port, fram->wp_pin, 1);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	68d8      	ldr	r0, [r3, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	8a9b      	ldrh	r3, [r3, #20]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4619      	mov	r1, r3
 8000f62:	f001 fbd3 	bl	800270c <HAL_GPIO_WritePin>
	fram_SetProtectedBlocs(fram, 0);
 8000f66:	2100      	movs	r1, #0
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f7ff fef6 	bl	8000d5a <fram_SetProtectedBlocs>
	fram->sreg=fram_ReadSreg(fram);
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f7ff ff1a 	bl	8000da8 <fram_ReadSreg>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	759a      	strb	r2, [r3, #22]
	fram->framID=fram_ReadID(fram);
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f7ff ff9a 	bl	8000eb6 <fram_ReadID>
 8000f82:	4602      	mov	r2, r0
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	619a      	str	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b4a      	ldr	r3, [pc, #296]	; (80010d4 <MX_GPIO_Init+0x144>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a49      	ldr	r2, [pc, #292]	; (80010d4 <MX_GPIO_Init+0x144>)
 8000fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <MX_GPIO_Init+0x144>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b43      	ldr	r3, [pc, #268]	; (80010d4 <MX_GPIO_Init+0x144>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a42      	ldr	r2, [pc, #264]	; (80010d4 <MX_GPIO_Init+0x144>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <MX_GPIO_Init+0x144>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b3c      	ldr	r3, [pc, #240]	; (80010d4 <MX_GPIO_Init+0x144>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a3b      	ldr	r2, [pc, #236]	; (80010d4 <MX_GPIO_Init+0x144>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <MX_GPIO_Init+0x144>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <MX_GPIO_Init+0x144>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a34      	ldr	r2, [pc, #208]	; (80010d4 <MX_GPIO_Init+0x144>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <MX_GPIO_Init+0x144>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <MX_GPIO_Init+0x144>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a2d      	ldr	r2, [pc, #180]	; (80010d4 <MX_GPIO_Init+0x144>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <MX_GPIO_Init+0x144>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, e_papier_cs_Pin|fram_cs_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001038:	4827      	ldr	r0, [pc, #156]	; (80010d8 <MX_GPIO_Init+0x148>)
 800103a:	f001 fb67 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(e_papier_dc_GPIO_Port, e_papier_dc_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2120      	movs	r1, #32
 8001042:	4825      	ldr	r0, [pc, #148]	; (80010d8 <MX_GPIO_Init+0x148>)
 8001044:	f001 fb62 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(e_papier_rst_GPIO_Port, e_papier_rst_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2102      	movs	r1, #2
 800104c:	4823      	ldr	r0, [pc, #140]	; (80010dc <MX_GPIO_Init+0x14c>)
 800104e:	f001 fb5d 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, fram_hold_Pin|fram_wp_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2103      	movs	r1, #3
 8001056:	4822      	ldr	r0, [pc, #136]	; (80010e0 <MX_GPIO_Init+0x150>)
 8001058:	f001 fb58 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = e_papier_cs_Pin|e_papier_dc_Pin|fram_cs_Pin;
 800105c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4818      	ldr	r0, [pc, #96]	; (80010d8 <MX_GPIO_Init+0x148>)
 8001076:	f001 f9ad 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = e_papier_rst_Pin;
 800107a:	2302      	movs	r3, #2
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(e_papier_rst_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4812      	ldr	r0, [pc, #72]	; (80010dc <MX_GPIO_Init+0x14c>)
 8001092:	f001 f99f 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = e_papier_busy_Pin;
 8001096:	2304      	movs	r3, #4
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(e_papier_busy_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_GPIO_Init+0x14c>)
 80010aa:	f001 f993 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = fram_hold_Pin|fram_wp_Pin;
 80010ae:	2303      	movs	r3, #3
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_GPIO_Init+0x150>)
 80010c6:	f001 f985 	bl	80023d4 <HAL_GPIO_Init>

}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	; 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020400 	.word	0x40020400
 80010e0:	40020c00 	.word	0x40020c00

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 80010ea:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ec:	f000 fc38 	bl	8001960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f0:	f000 f94a 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f4:	f7ff ff4c 	bl	8000f90 <MX_GPIO_Init>
  MX_SPI2_Init();
 80010f8:	f000 f9b4 	bl	8001464 <MX_SPI2_Init>
  MX_SPI3_Init();
 80010fc:	f000 f9ea 	bl	80014d4 <MX_SPI3_Init>
  MX_ADC1_Init();
 8001100:	f7ff fb52 	bl	80007a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  e_papier_init(&hspi2);
 8001104:	4897      	ldr	r0, [pc, #604]	; (8001364 <main+0x280>)
 8001106:	f7ff fd8b 	bl	8000c20 <e_papier_init>
  GFX_SetFont(font_8x5);
 800110a:	4897      	ldr	r0, [pc, #604]	; (8001368 <main+0x284>)
 800110c:	f7ff fa3a 	bl	8000584 <GFX_SetFont>
  e_papier_display();
 8001110:	f7ff fd38 	bl	8000b84 <e_papier_display>
  fram_Init(&fram1, &hspi3, fram_hold_GPIO_Port, fram_cs_GPIO_Port, fram_wp_GPIO_Port, fram_hold_Pin, fram_cs_Pin, fram_wp_Pin);
 8001114:	2302      	movs	r3, #2
 8001116:	9303      	str	r3, [sp, #12]
 8001118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	4b92      	ldr	r3, [pc, #584]	; (800136c <main+0x288>)
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4b92      	ldr	r3, [pc, #584]	; (8001370 <main+0x28c>)
 8001128:	4a90      	ldr	r2, [pc, #576]	; (800136c <main+0x288>)
 800112a:	4992      	ldr	r1, [pc, #584]	; (8001374 <main+0x290>)
 800112c:	4892      	ldr	r0, [pc, #584]	; (8001378 <main+0x294>)
 800112e:	f7ff feee 	bl	8000f0e <fram_Init>
  HAL_ADC_Start(&hadc1);
 8001132:	4892      	ldr	r0, [pc, #584]	; (800137c <main+0x298>)
 8001134:	f000 fcee 	bl	8001b14 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001138:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800113c:	488f      	ldr	r0, [pc, #572]	; (800137c <main+0x298>)
 800113e:	f000 fd9d 	bl	8001c7c <HAL_ADC_PollForConversion>
  uint16_t adc=HAL_ADC_GetValue(&hadc1);
 8001142:	488e      	ldr	r0, [pc, #568]	; (800137c <main+0x298>)
 8001144:	f000 fe25 	bl	8001d92 <HAL_ADC_GetValue>
 8001148:	4603      	mov	r3, r0
 800114a:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
  srand(adc);
 800114e:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fd32 	bl	8003bbc <srand>
  uint8_t dataTx[360],dataRx[360];
  for(int i=0;i<360;i++)
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800115e:	e01c      	b.n	800119a <main+0xb6>
  {
	  dataTx[i]=rand()%255;
 8001160:	f002 fd5a 	bl	8003c18 <rand>
 8001164:	4602      	mov	r2, r0
 8001166:	4b86      	ldr	r3, [pc, #536]	; (8001380 <main+0x29c>)
 8001168:	fb83 1302 	smull	r1, r3, r3, r2
 800116c:	4413      	add	r3, r2
 800116e:	11d9      	asrs	r1, r3, #7
 8001170:	17d3      	asrs	r3, r2, #31
 8001172:	1ac9      	subs	r1, r1, r3
 8001174:	460b      	mov	r3, r1
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	1a5b      	subs	r3, r3, r1
 800117a:	1ad1      	subs	r1, r2, r3
 800117c:	b2c9      	uxtb	r1, r1
 800117e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8001182:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8001186:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800118a:	4413      	add	r3, r2
 800118c:	460a      	mov	r2, r1
 800118e:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<360;i++)
 8001190:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001194:	3301      	adds	r3, #1
 8001196:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800119a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800119e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80011a2:	dbdd      	blt.n	8001160 <main+0x7c>
  }
  fram_Write(&fram1, 0, dataTx, 360);
 80011a4:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 80011a8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80011ac:	2100      	movs	r1, #0
 80011ae:	4872      	ldr	r0, [pc, #456]	; (8001378 <main+0x294>)
 80011b0:	f7ff fe1d 	bl	8000dee <fram_Write>
  HAL_Delay(100);
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f000 fc45 	bl	8001a44 <HAL_Delay>
  fram_Read(&fram1, 0, dataRx, 360);
 80011ba:	1d3a      	adds	r2, r7, #4
 80011bc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80011c0:	2100      	movs	r1, #0
 80011c2:	486d      	ldr	r0, [pc, #436]	; (8001378 <main+0x294>)
 80011c4:	f7ff fe45 	bl	8000e52 <fram_Read>
  HAL_Delay(1000);
 80011c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011cc:	f000 fc3a 	bl	8001a44 <HAL_Delay>
  GFX_DrawLine(20, 299, 20, 299-dataRx[0], BLACK);
 80011d0:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80011d4:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	f5c3 7395 	rsb	r3, r3, #298	; 0x12a
 80011de:	3301      	adds	r3, #1
 80011e0:	2200      	movs	r2, #0
 80011e2:	9200      	str	r2, [sp, #0]
 80011e4:	2214      	movs	r2, #20
 80011e6:	f240 112b 	movw	r1, #299	; 0x12b
 80011ea:	2014      	movs	r0, #20
 80011ec:	f7ff fa96 	bl	800071c <GFX_DrawLine>
  for(int i=1;i<360;i++)
 80011f0:	2301      	movs	r3, #1
 80011f2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80011f6:	e027      	b.n	8001248 <main+0x164>
  {
	  GFX_DrawLine(19+i, 299-dataRx[i-1], 20+i, 299-dataRx[i], BLACK);
 80011f8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80011fc:	f103 0013 	add.w	r0, r3, #19
 8001200:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8001204:	3b01      	subs	r3, #1
 8001206:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800120a:	f5a2 7239 	sub.w	r2, r2, #740	; 0x2e4
 800120e:	5cd3      	ldrb	r3, [r2, r3]
 8001210:	f5c3 7195 	rsb	r1, r3, #298	; 0x12a
 8001214:	3101      	adds	r1, #1
 8001216:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800121a:	f103 0414 	add.w	r4, r3, #20
 800121e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8001222:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8001226:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800122a:	4413      	add	r3, r2
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	f5c3 7395 	rsb	r3, r3, #298	; 0x12a
 8001232:	3301      	adds	r3, #1
 8001234:	2200      	movs	r2, #0
 8001236:	9200      	str	r2, [sp, #0]
 8001238:	4622      	mov	r2, r4
 800123a:	f7ff fa6f 	bl	800071c <GFX_DrawLine>
  for(int i=1;i<360;i++)
 800123e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8001242:	3301      	adds	r3, #1
 8001244:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8001248:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800124c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001250:	dbd2      	blt.n	80011f8 <main+0x114>
  }
  e_papier_display();
 8001252:	f7ff fc97 	bl	8000b84 <e_papier_display>
  e_papier_clear();
 8001256:	f7ff fc7f 	bl	8000b58 <e_papier_clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i=0;i<360;i++)
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8001260:	e01b      	b.n	800129a <main+0x1b6>
	  {
		  dataTx[i]=rand()%200;
 8001262:	f002 fcd9 	bl	8003c18 <rand>
 8001266:	4603      	mov	r3, r0
 8001268:	4a46      	ldr	r2, [pc, #280]	; (8001384 <main+0x2a0>)
 800126a:	fb82 1203 	smull	r1, r2, r2, r3
 800126e:	1191      	asrs	r1, r2, #6
 8001270:	17da      	asrs	r2, r3, #31
 8001272:	1a8a      	subs	r2, r1, r2
 8001274:	21c8      	movs	r1, #200	; 0xc8
 8001276:	fb01 f202 	mul.w	r2, r1, r2
 800127a:	1a9a      	subs	r2, r3, r2
 800127c:	b2d1      	uxtb	r1, r2
 800127e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8001282:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8001286:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800128a:	4413      	add	r3, r2
 800128c:	460a      	mov	r2, r1
 800128e:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<360;i++)
 8001290:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8001294:	3301      	adds	r3, #1
 8001296:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800129a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800129e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80012a2:	dbde      	blt.n	8001262 <main+0x17e>
	  }
	  fram_Write(&fram1, 0, dataTx, 360);
 80012a4:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 80012a8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80012ac:	2100      	movs	r1, #0
 80012ae:	4832      	ldr	r0, [pc, #200]	; (8001378 <main+0x294>)
 80012b0:	f7ff fd9d 	bl	8000dee <fram_Write>
	  HAL_Delay(100);
 80012b4:	2064      	movs	r0, #100	; 0x64
 80012b6:	f000 fbc5 	bl	8001a44 <HAL_Delay>
	  fram_Read(&fram1, 0, dataRx, 360);
 80012ba:	1d3a      	adds	r2, r7, #4
 80012bc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80012c0:	2100      	movs	r1, #0
 80012c2:	482d      	ldr	r0, [pc, #180]	; (8001378 <main+0x294>)
 80012c4:	f7ff fdc5 	bl	8000e52 <fram_Read>
	  HAL_Delay(1000);
 80012c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012cc:	f000 fbba 	bl	8001a44 <HAL_Delay>
	  GFX_DrawLine(20, 299, 20, 299-dataRx[0], BLACK);
 80012d0:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80012d4:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	f5c3 7395 	rsb	r3, r3, #298	; 0x12a
 80012de:	3301      	adds	r3, #1
 80012e0:	2200      	movs	r2, #0
 80012e2:	9200      	str	r2, [sp, #0]
 80012e4:	2214      	movs	r2, #20
 80012e6:	f240 112b 	movw	r1, #299	; 0x12b
 80012ea:	2014      	movs	r0, #20
 80012ec:	f7ff fa16 	bl	800071c <GFX_DrawLine>
	  for(int i=1;i<360;i++)
 80012f0:	2301      	movs	r3, #1
 80012f2:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 80012f6:	e027      	b.n	8001348 <main+0x264>
	  {
		  GFX_DrawLine(19+i, 299-dataRx[i-1], 20+i, 299-dataRx[i], BLACK);
 80012f8:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80012fc:	f103 0013 	add.w	r0, r3, #19
 8001300:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8001304:	3b01      	subs	r3, #1
 8001306:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800130a:	f5a2 7239 	sub.w	r2, r2, #740	; 0x2e4
 800130e:	5cd3      	ldrb	r3, [r2, r3]
 8001310:	f5c3 7195 	rsb	r1, r3, #298	; 0x12a
 8001314:	3101      	adds	r1, #1
 8001316:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 800131a:	f103 0414 	add.w	r4, r3, #20
 800131e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8001322:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8001326:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 800132a:	4413      	add	r3, r2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	f5c3 7395 	rsb	r3, r3, #298	; 0x12a
 8001332:	3301      	adds	r3, #1
 8001334:	2200      	movs	r2, #0
 8001336:	9200      	str	r2, [sp, #0]
 8001338:	4622      	mov	r2, r4
 800133a:	f7ff f9ef 	bl	800071c <GFX_DrawLine>
	  for(int i=1;i<360;i++)
 800133e:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8001342:	3301      	adds	r3, #1
 8001344:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 8001348:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 800134c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001350:	dbd2      	blt.n	80012f8 <main+0x214>
	  }
	  e_papier_display();
 8001352:	f7ff fc17 	bl	8000b84 <e_papier_display>
	  e_papier_clear();
 8001356:	f7ff fbff 	bl	8000b58 <e_papier_clear>
	  HAL_Delay(10000);
 800135a:	f242 7010 	movw	r0, #10000	; 0x2710
 800135e:	f000 fb71 	bl	8001a44 <HAL_Delay>
	  for(int i=0;i<360;i++)
 8001362:	e77a      	b.n	800125a <main+0x176>
 8001364:	20003b90 	.word	0x20003b90
 8001368:	08004d7c 	.word	0x08004d7c
 800136c:	40020c00 	.word	0x40020c00
 8001370:	40020800 	.word	0x40020800
 8001374:	20003be8 	.word	0x20003be8
 8001378:	20003b74 	.word	0x20003b74
 800137c:	20000090 	.word	0x20000090
 8001380:	80808081 	.word	0x80808081
 8001384:	51eb851f 	.word	0x51eb851f

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b094      	sub	sp, #80	; 0x50
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	2230      	movs	r2, #48	; 0x30
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f002 fc08 	bl	8003bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <SystemClock_Config+0xc8>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	4a26      	ldr	r2, [pc, #152]	; (8001450 <SystemClock_Config+0xc8>)
 80013b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ba:	6413      	str	r3, [r2, #64]	; 0x40
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <SystemClock_Config+0xc8>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <SystemClock_Config+0xcc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a20      	ldr	r2, [pc, #128]	; (8001454 <SystemClock_Config+0xcc>)
 80013d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <SystemClock_Config+0xcc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e4:	2301      	movs	r3, #1
 80013e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ee:	2302      	movs	r3, #2
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013f8:	2304      	movs	r3, #4
 80013fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013fc:	2364      	movs	r3, #100	; 0x64
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001404:	2304      	movs	r3, #4
 8001406:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	4618      	mov	r0, r3
 800140e:	f001 f997 	bl	8002740 <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001418:	f000 f81e 	bl	8001458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	230f      	movs	r3, #15
 800141e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001420:	2302      	movs	r3, #2
 8001422:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2103      	movs	r1, #3
 8001438:	4618      	mov	r0, r3
 800143a:	f001 fbf9 	bl	8002c30 <HAL_RCC_ClockConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001444:	f000 f808 	bl	8001458 <Error_Handler>
  }
}
 8001448:	bf00      	nop
 800144a:	3750      	adds	r7, #80	; 0x50
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	40007000 	.word	0x40007000

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	e7fe      	b.n	8001460 <Error_Handler+0x8>
	...

08001464 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_SPI2_Init+0x68>)
 800146a:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <MX_SPI2_Init+0x6c>)
 800146c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_SPI2_Init+0x68>)
 8001470:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001474:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_SPI2_Init+0x68>)
 8001478:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800147c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_SPI2_Init+0x68>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_SPI2_Init+0x68>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_SPI2_Init+0x68>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_SPI2_Init+0x68>)
 8001492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001496:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_SPI2_Init+0x68>)
 800149a:	2210      	movs	r2, #16
 800149c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_SPI2_Init+0x68>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_SPI2_Init+0x68>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_SPI2_Init+0x68>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_SPI2_Init+0x68>)
 80014b2:	220a      	movs	r2, #10
 80014b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_SPI2_Init+0x68>)
 80014b8:	f001 fda6 	bl	8003008 <HAL_SPI_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80014c2:	f7ff ffc9 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20003b90 	.word	0x20003b90
 80014d0:	40003800 	.word	0x40003800

080014d4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_SPI3_Init+0x64>)
 80014da:	4a18      	ldr	r2, [pc, #96]	; (800153c <MX_SPI3_Init+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_SPI3_Init+0x64>)
 80014e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_SPI3_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_SPI3_Init+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_SPI3_Init+0x64>)
 80014f4:	2202      	movs	r2, #2
 80014f6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_SPI3_Init+0x64>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_SPI3_Init+0x64>)
 8001500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001504:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_SPI3_Init+0x64>)
 8001508:	2238      	movs	r2, #56	; 0x38
 800150a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <MX_SPI3_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_SPI3_Init+0x64>)
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <MX_SPI3_Init+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_SPI3_Init+0x64>)
 8001520:	220a      	movs	r2, #10
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <MX_SPI3_Init+0x64>)
 8001526:	f001 fd6f 	bl	8003008 <HAL_SPI_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001530:	f7ff ff92 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20003be8 	.word	0x20003be8
 800153c:	40003c00 	.word	0x40003c00

08001540 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08e      	sub	sp, #56	; 0x38
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a51      	ldr	r2, [pc, #324]	; (80016a4 <HAL_SPI_MspInit+0x164>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d14b      	bne.n	80015fa <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
 8001566:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a4f      	ldr	r2, [pc, #316]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b4d      	ldr	r3, [pc, #308]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157a:	623b      	str	r3, [r7, #32]
 800157c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a48      	ldr	r2, [pc, #288]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a41      	ldr	r2, [pc, #260]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015b6:	2308      	movs	r3, #8
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015c6:	2305      	movs	r3, #5
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ce:	4619      	mov	r1, r3
 80015d0:	4836      	ldr	r0, [pc, #216]	; (80016ac <HAL_SPI_MspInit+0x16c>)
 80015d2:	f000 feff 	bl	80023d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e8:	2305      	movs	r3, #5
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	482f      	ldr	r0, [pc, #188]	; (80016b0 <HAL_SPI_MspInit+0x170>)
 80015f4:	f000 feee 	bl	80023d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80015f8:	e050      	b.n	800169c <HAL_SPI_MspInit+0x15c>
  else if(spiHandle->Instance==SPI3)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a2d      	ldr	r2, [pc, #180]	; (80016b4 <HAL_SPI_MspInit+0x174>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d14b      	bne.n	800169c <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 800160e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	6313      	str	r3, [r2, #48]	; 0x30
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	6313      	str	r3, [r2, #48]	; 0x30
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_SPI_MspInit+0x168>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800166a:	2307      	movs	r3, #7
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001672:	4619      	mov	r1, r3
 8001674:	480e      	ldr	r0, [pc, #56]	; (80016b0 <HAL_SPI_MspInit+0x170>)
 8001676:	f000 fead 	bl	80023d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800167a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800168c:	2306      	movs	r3, #6
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <HAL_SPI_MspInit+0x16c>)
 8001698:	f000 fe9c 	bl	80023d4 <HAL_GPIO_Init>
}
 800169c:	bf00      	nop
 800169e:	3738      	adds	r7, #56	; 0x38
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40003800 	.word	0x40003800
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40003c00 	.word	0x40003c00

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_MspInit+0x4c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <HAL_MspInit+0x4c>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_MspInit+0x4c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_MspInit+0x4c>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>

0800171a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler+0x4>

08001726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f000 f956 	bl	8001a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
	return 1;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_kill>:

int _kill(int pid, int sig)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001776:	f002 f9ef 	bl	8003b58 <__errno>
 800177a:	4603      	mov	r3, r0
 800177c:	2216      	movs	r2, #22
 800177e:	601a      	str	r2, [r3, #0]
	return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_exit>:

void _exit (int status)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001794:	f04f 31ff 	mov.w	r1, #4294967295
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ffe7 	bl	800176c <_kill>
	while (1) {}		/* Make sure we hang here */
 800179e:	e7fe      	b.n	800179e <_exit+0x12>

080017a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	e00a      	b.n	80017c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017b2:	f3af 8000 	nop.w
 80017b6:	4601      	mov	r1, r0
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	60ba      	str	r2, [r7, #8]
 80017be:	b2ca      	uxtb	r2, r1
 80017c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbf0      	blt.n	80017b2 <_read+0x12>
	}

return len;
 80017d0:	687b      	ldr	r3, [r7, #4]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e009      	b.n	8001800 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf1      	blt.n	80017ec <_write+0x12>
	}
	return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_close>:

int _close(int file)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
	return -1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800183a:	605a      	str	r2, [r3, #4]
	return 0;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_isatty>:

int _isatty(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	return 1;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
	return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <_sbrk+0x5c>)
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <_sbrk+0x60>)
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <_sbrk+0x64>)
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <_sbrk+0x68>)
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d207      	bcs.n	80018bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ac:	f002 f954 	bl	8003b58 <__errno>
 80018b0:	4603      	mov	r3, r0
 80018b2:	220c      	movs	r2, #12
 80018b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e009      	b.n	80018d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <_sbrk+0x64>)
 80018cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20020000 	.word	0x20020000
 80018dc:	00000400 	.word	0x00000400
 80018e0:	20003c40 	.word	0x20003c40
 80018e4:	20003c58 	.word	0x20003c58

080018e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <SystemInit+0x20>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <SystemInit+0x20>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001944 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001910:	480d      	ldr	r0, [pc, #52]	; (8001948 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001912:	490e      	ldr	r1, [pc, #56]	; (800194c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001914:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001928:	4c0b      	ldr	r4, [pc, #44]	; (8001958 <LoopFillZerobss+0x26>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001936:	f7ff ffd7 	bl	80018e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193a:	f002 f913 	bl	8003b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193e:	f7ff fbd1 	bl	80010e4 <main>
  bx  lr    
 8001942:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001944:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001950:	080050c4 	.word	0x080050c4
  ldr r2, =_sbss
 8001954:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001958:	20003c58 	.word	0x20003c58

0800195c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC_IRQHandler>
	...

08001960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <HAL_Init+0x40>)
 800196a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <HAL_Init+0x40>)
 8001976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800197a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <HAL_Init+0x40>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 fcef 	bl	800236c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198e:	200f      	movs	r0, #15
 8001990:	f000 f808 	bl	80019a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001994:	f7ff fe90 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00

080019a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x54>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_InitTick+0x58>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 fcf9 	bl	80023ba <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00e      	b.n	80019f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d80a      	bhi.n	80019ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f000 fccf 	bl	8002382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e4:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <HAL_InitTick+0x5c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x20>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_IncTick+0x24>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20003c44 	.word	0x20003c44

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20003c44 	.word	0x20003c44

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008

08001a8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e033      	b.n	8001b0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe fece 	bl	800084c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d118      	bne.n	8001afc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ad2:	f023 0302 	bic.w	r3, r3, #2
 8001ad6:	f043 0202 	orr.w	r2, r3, #2
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fa96 	bl	8002010 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f023 0303 	bic.w	r3, r3, #3
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
 8001afa:	e001      	b.n	8001b00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_Start+0x1a>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e097      	b.n	8001c5e <HAL_ADC_Start+0x14a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d018      	beq.n	8001b76 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b54:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <HAL_ADC_Start+0x158>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a45      	ldr	r2, [pc, #276]	; (8001c70 <HAL_ADC_Start+0x15c>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0c9a      	lsrs	r2, r3, #18
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b68:	e002      	b.n	8001b70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f9      	bne.n	8001b6a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d15f      	bne.n	8001c44 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc2:	d106      	bne.n	8001bd2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	f023 0206 	bic.w	r2, r3, #6
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44
 8001bd0:	e002      	b.n	8001bd8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be0:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <HAL_ADC_Start+0x160>)
 8001be2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10f      	bne.n	8001c1a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d129      	bne.n	8001c5c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	e020      	b.n	8001c5c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <HAL_ADC_Start+0x164>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d11b      	bne.n	8001c5c <HAL_ADC_Start+0x148>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d114      	bne.n	8001c5c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	e00b      	b.n	8001c5c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f043 0210 	orr.w	r2, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c54:	f043 0201 	orr.w	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	431bde83 	.word	0x431bde83
 8001c74:	40012300 	.word	0x40012300
 8001c78:	40012000 	.word	0x40012000

08001c7c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c98:	d113      	bne.n	8001cc2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f043 0220 	orr.w	r2, r3, #32
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e063      	b.n	8001d8a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001cc2:	f7ff feb3 	bl	8001a2c <HAL_GetTick>
 8001cc6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cc8:	e021      	b.n	8001d0e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d01d      	beq.n	8001d0e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <HAL_ADC_PollForConversion+0x6c>
 8001cd8:	f7ff fea8 	bl	8001a2c <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d212      	bcs.n	8001d0e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d00b      	beq.n	8001d0e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f043 0204 	orr.w	r2, r3, #4
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e03d      	b.n	8001d8a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d1d6      	bne.n	8001cca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0212 	mvn.w	r2, #18
 8001d24:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d123      	bne.n	8001d88 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d11f      	bne.n	8001d88 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d006      	beq.n	8001d64 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d111      	bne.n	8001d88 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f043 0201 	orr.w	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x1c>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e113      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x244>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b09      	cmp	r3, #9
 8001dd6:	d925      	bls.n	8001e24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68d9      	ldr	r1, [r3, #12]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	4613      	mov	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	3b1e      	subs	r3, #30
 8001dee:	2207      	movs	r2, #7
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43da      	mvns	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	400a      	ands	r2, r1
 8001dfc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68d9      	ldr	r1, [r3, #12]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	4603      	mov	r3, r0
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4403      	add	r3, r0
 8001e16:	3b1e      	subs	r3, #30
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	e022      	b.n	8001e6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6919      	ldr	r1, [r3, #16]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	4613      	mov	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	2207      	movs	r2, #7
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	400a      	ands	r2, r1
 8001e46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6919      	ldr	r1, [r3, #16]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4403      	add	r3, r0
 8001e60:	409a      	lsls	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d824      	bhi.n	8001ebc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	3b05      	subs	r3, #5
 8001e84:	221f      	movs	r2, #31
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	400a      	ands	r2, r1
 8001e92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b05      	subs	r3, #5
 8001eae:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eba:	e04c      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	d824      	bhi.n	8001f0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3b23      	subs	r3, #35	; 0x23
 8001ed6:	221f      	movs	r2, #31
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43da      	mvns	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	3b23      	subs	r3, #35	; 0x23
 8001f00:	fa00 f203 	lsl.w	r2, r0, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f0c:	e023      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3b41      	subs	r3, #65	; 0x41
 8001f20:	221f      	movs	r2, #31
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	3b41      	subs	r3, #65	; 0x41
 8001f4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f56:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <HAL_ADC_ConfigChannel+0x250>)
 8001f58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a28      	ldr	r2, [pc, #160]	; (8002000 <HAL_ADC_ConfigChannel+0x254>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d10f      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x1d8>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b12      	cmp	r3, #18
 8001f6a:	d10b      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_ADC_ConfigChannel+0x254>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d12b      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x23a>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <HAL_ADC_ConfigChannel+0x258>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d003      	beq.n	8001fa0 <HAL_ADC_ConfigChannel+0x1f4>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b11      	cmp	r3, #17
 8001f9e:	d122      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a11      	ldr	r2, [pc, #68]	; (8002004 <HAL_ADC_ConfigChannel+0x258>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d111      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_ADC_ConfigChannel+0x25c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_ADC_ConfigChannel+0x260>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	0c9a      	lsrs	r2, r3, #18
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fd8:	e002      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f9      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40012300 	.word	0x40012300
 8002000:	40012000 	.word	0x40012000
 8002004:	10000012 	.word	0x10000012
 8002008:	20000000 	.word	0x20000000
 800200c:	431bde83 	.word	0x431bde83

08002010 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002018:	4b79      	ldr	r3, [pc, #484]	; (8002200 <ADC_Init+0x1f0>)
 800201a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	431a      	orrs	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	021a      	lsls	r2, r3, #8
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002068:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800208a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6899      	ldr	r1, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a2:	4a58      	ldr	r2, [pc, #352]	; (8002204 <ADC_Init+0x1f4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d022      	beq.n	80020ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6899      	ldr	r1, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6899      	ldr	r1, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	e00f      	b.n	800210e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800210c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0202 	bic.w	r2, r2, #2
 800211c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6899      	ldr	r1, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7e1b      	ldrb	r3, [r3, #24]
 8002128:	005a      	lsls	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01b      	beq.n	8002174 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800214a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800215a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6859      	ldr	r1, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	3b01      	subs	r3, #1
 8002168:	035a      	lsls	r2, r3, #13
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	e007      	b.n	8002184 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002182:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	3b01      	subs	r3, #1
 80021a0:	051a      	lsls	r2, r3, #20
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6899      	ldr	r1, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021c6:	025a      	lsls	r2, r3, #9
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6899      	ldr	r1, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	029a      	lsls	r2, r3, #10
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	609a      	str	r2, [r3, #8]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	40012300 	.word	0x40012300
 8002204:	0f000001 	.word	0x0f000001

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223a:	4a04      	ldr	r2, [pc, #16]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db0a      	blt.n	8002296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	490c      	ldr	r1, [pc, #48]	; (80022b8 <__NVIC_SetPriority+0x4c>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002294:	e00a      	b.n	80022ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <__NVIC_SetPriority+0x50>)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3b04      	subs	r3, #4
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	761a      	strb	r2, [r3, #24]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f1c3 0307 	rsb	r3, r3, #7
 80022da:	2b04      	cmp	r3, #4
 80022dc:	bf28      	it	cs
 80022de:	2304      	movcs	r3, #4
 80022e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d902      	bls.n	80022f0 <NVIC_EncodePriority+0x30>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3b03      	subs	r3, #3
 80022ee:	e000      	b.n	80022f2 <NVIC_EncodePriority+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	4313      	orrs	r3, r2
         );
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	; 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002338:	d301      	bcc.n	800233e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233a:	2301      	movs	r3, #1
 800233c:	e00f      	b.n	800235e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233e:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <SysTick_Config+0x40>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002346:	210f      	movs	r1, #15
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f7ff ff8e 	bl	800226c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <SysTick_Config+0x40>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <SysTick_Config+0x40>)
 8002358:	2207      	movs	r2, #7
 800235a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	e000e010 	.word	0xe000e010

0800236c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff47 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002394:	f7ff ff5c 	bl	8002250 <__NVIC_GetPriorityGrouping>
 8002398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f7ff ff8e 	bl	80022c0 <NVIC_EncodePriority>
 80023a4:	4602      	mov	r2, r0
 80023a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff5d 	bl	800226c <__NVIC_SetPriority>
}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffb0 	bl	8002328 <SysTick_Config>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	e159      	b.n	80026a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023f0:	2201      	movs	r2, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	429a      	cmp	r2, r3
 800240a:	f040 8148 	bne.w	800269e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b01      	cmp	r3, #1
 8002418:	d005      	beq.n	8002426 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002422:	2b02      	cmp	r3, #2
 8002424:	d130      	bne.n	8002488 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	2203      	movs	r2, #3
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800245c:	2201      	movs	r2, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 0201 	and.w	r2, r3, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b03      	cmp	r3, #3
 8002492:	d017      	beq.n	80024c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	2203      	movs	r2, #3
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d123      	bne.n	8002518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	08da      	lsrs	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3208      	adds	r2, #8
 80024d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	220f      	movs	r2, #15
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	08da      	lsrs	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3208      	adds	r2, #8
 8002512:	69b9      	ldr	r1, [r7, #24]
 8002514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0203 	and.w	r2, r3, #3
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80a2 	beq.w	800269e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	4b57      	ldr	r3, [pc, #348]	; (80026bc <HAL_GPIO_Init+0x2e8>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	4a56      	ldr	r2, [pc, #344]	; (80026bc <HAL_GPIO_Init+0x2e8>)
 8002564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002568:	6453      	str	r3, [r2, #68]	; 0x44
 800256a:	4b54      	ldr	r3, [pc, #336]	; (80026bc <HAL_GPIO_Init+0x2e8>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002576:	4a52      	ldr	r2, [pc, #328]	; (80026c0 <HAL_GPIO_Init+0x2ec>)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3302      	adds	r3, #2
 800257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	220f      	movs	r2, #15
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a49      	ldr	r2, [pc, #292]	; (80026c4 <HAL_GPIO_Init+0x2f0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d019      	beq.n	80025d6 <HAL_GPIO_Init+0x202>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a48      	ldr	r2, [pc, #288]	; (80026c8 <HAL_GPIO_Init+0x2f4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0x1fe>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a47      	ldr	r2, [pc, #284]	; (80026cc <HAL_GPIO_Init+0x2f8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00d      	beq.n	80025ce <HAL_GPIO_Init+0x1fa>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a46      	ldr	r2, [pc, #280]	; (80026d0 <HAL_GPIO_Init+0x2fc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d007      	beq.n	80025ca <HAL_GPIO_Init+0x1f6>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a45      	ldr	r2, [pc, #276]	; (80026d4 <HAL_GPIO_Init+0x300>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_GPIO_Init+0x1f2>
 80025c2:	2304      	movs	r3, #4
 80025c4:	e008      	b.n	80025d8 <HAL_GPIO_Init+0x204>
 80025c6:	2307      	movs	r3, #7
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x204>
 80025ca:	2303      	movs	r3, #3
 80025cc:	e004      	b.n	80025d8 <HAL_GPIO_Init+0x204>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e002      	b.n	80025d8 <HAL_GPIO_Init+0x204>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_GPIO_Init+0x204>
 80025d6:	2300      	movs	r3, #0
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	f002 0203 	and.w	r2, r2, #3
 80025de:	0092      	lsls	r2, r2, #2
 80025e0:	4093      	lsls	r3, r2
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e8:	4935      	ldr	r1, [pc, #212]	; (80026c0 <HAL_GPIO_Init+0x2ec>)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3302      	adds	r3, #2
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f6:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <HAL_GPIO_Init+0x304>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261a:	4a2f      	ldr	r2, [pc, #188]	; (80026d8 <HAL_GPIO_Init+0x304>)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <HAL_GPIO_Init+0x304>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002644:	4a24      	ldr	r2, [pc, #144]	; (80026d8 <HAL_GPIO_Init+0x304>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800264a:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <HAL_GPIO_Init+0x304>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800266e:	4a1a      	ldr	r2, [pc, #104]	; (80026d8 <HAL_GPIO_Init+0x304>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002674:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <HAL_GPIO_Init+0x304>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002698:	4a0f      	ldr	r2, [pc, #60]	; (80026d8 <HAL_GPIO_Init+0x304>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3301      	adds	r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b0f      	cmp	r3, #15
 80026a8:	f67f aea2 	bls.w	80023f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3724      	adds	r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40013800 	.word	0x40013800
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020800 	.word	0x40020800
 80026d0:	40020c00 	.word	0x40020c00
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40013c00 	.word	0x40013c00

080026dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	887b      	ldrh	r3, [r7, #2]
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	e001      	b.n	80026fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
 8002718:	4613      	mov	r3, r2
 800271a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800271c:	787b      	ldrb	r3, [r7, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002728:	e003      	b.n	8002732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	041a      	lsls	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	619a      	str	r2, [r3, #24]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e267      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d075      	beq.n	800284a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800275e:	4b88      	ldr	r3, [pc, #544]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b04      	cmp	r3, #4
 8002768:	d00c      	beq.n	8002784 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276a:	4b85      	ldr	r3, [pc, #532]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002772:	2b08      	cmp	r3, #8
 8002774:	d112      	bne.n	800279c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002776:	4b82      	ldr	r3, [pc, #520]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002782:	d10b      	bne.n	800279c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	4b7e      	ldr	r3, [pc, #504]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d05b      	beq.n	8002848 <HAL_RCC_OscConfig+0x108>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d157      	bne.n	8002848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e242      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a4:	d106      	bne.n	80027b4 <HAL_RCC_OscConfig+0x74>
 80027a6:	4b76      	ldr	r3, [pc, #472]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a75      	ldr	r2, [pc, #468]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e01d      	b.n	80027f0 <HAL_RCC_OscConfig+0xb0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x98>
 80027be:	4b70      	ldr	r3, [pc, #448]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a6f      	ldr	r2, [pc, #444]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6c      	ldr	r2, [pc, #432]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e00b      	b.n	80027f0 <HAL_RCC_OscConfig+0xb0>
 80027d8:	4b69      	ldr	r3, [pc, #420]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a68      	ldr	r2, [pc, #416]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b66      	ldr	r3, [pc, #408]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a65      	ldr	r2, [pc, #404]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7ff f918 	bl	8001a2c <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7ff f914 	bl	8001a2c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e207      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b5b      	ldr	r3, [pc, #364]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0xc0>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7ff f904 	bl	8001a2c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002828:	f7ff f900 	bl	8001a2c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e1f3      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	4b51      	ldr	r3, [pc, #324]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0xe8>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d063      	beq.n	800291e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002856:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b47      	ldr	r3, [pc, #284]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800286a:	2b08      	cmp	r3, #8
 800286c:	d11c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286e:	4b44      	ldr	r3, [pc, #272]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d116      	bne.n	80028a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	4b41      	ldr	r3, [pc, #260]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x152>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e1c7      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4937      	ldr	r1, [pc, #220]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	e03a      	b.n	800291e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b0:	4b34      	ldr	r3, [pc, #208]	; (8002984 <HAL_RCC_OscConfig+0x244>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7ff f8b9 	bl	8001a2c <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028be:	f7ff f8b5 	bl	8001a2c <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1a8      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4925      	ldr	r1, [pc, #148]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e015      	b.n	800291e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f2:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_RCC_OscConfig+0x244>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7ff f898 	bl	8001a2c <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002900:	f7ff f894 	bl	8001a2c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e187      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d036      	beq.n	8002998 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_RCC_OscConfig+0x248>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7ff f878 	bl	8001a2c <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002940:	f7ff f874 	bl	8001a2c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e167      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x200>
 800295e:	e01b      	b.n	8002998 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_RCC_OscConfig+0x248>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002966:	f7ff f861 	bl	8001a2c <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	e00e      	b.n	800298c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296e:	f7ff f85d 	bl	8001a2c <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d907      	bls.n	800298c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e150      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
 8002980:	40023800 	.word	0x40023800
 8002984:	42470000 	.word	0x42470000
 8002988:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	4b88      	ldr	r3, [pc, #544]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 800298e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ea      	bne.n	800296e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8097 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029aa:	4b81      	ldr	r3, [pc, #516]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b7d      	ldr	r3, [pc, #500]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a7c      	ldr	r2, [pc, #496]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
 80029c6:	4b7a      	ldr	r3, [pc, #488]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	4b77      	ldr	r3, [pc, #476]	; (8002bb4 <HAL_RCC_OscConfig+0x474>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d118      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e2:	4b74      	ldr	r3, [pc, #464]	; (8002bb4 <HAL_RCC_OscConfig+0x474>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a73      	ldr	r2, [pc, #460]	; (8002bb4 <HAL_RCC_OscConfig+0x474>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7ff f81d 	bl	8001a2c <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f6:	f7ff f819 	bl	8001a2c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e10c      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	4b6a      	ldr	r3, [pc, #424]	; (8002bb4 <HAL_RCC_OscConfig+0x474>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x2ea>
 8002a1c:	4b64      	ldr	r3, [pc, #400]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a63      	ldr	r2, [pc, #396]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
 8002a28:	e01c      	b.n	8002a64 <HAL_RCC_OscConfig+0x324>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b05      	cmp	r3, #5
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x30c>
 8002a32:	4b5f      	ldr	r3, [pc, #380]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	4a5e      	ldr	r2, [pc, #376]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3e:	4b5c      	ldr	r3, [pc, #368]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	4a5b      	ldr	r2, [pc, #364]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCC_OscConfig+0x324>
 8002a4c:	4b58      	ldr	r3, [pc, #352]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a57      	ldr	r2, [pc, #348]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
 8002a58:	4b55      	ldr	r3, [pc, #340]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	4a54      	ldr	r2, [pc, #336]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	f023 0304 	bic.w	r3, r3, #4
 8002a62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d015      	beq.n	8002a98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe ffde 	bl	8001a2c <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe ffda 	bl	8001a2c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0cb      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8a:	4b49      	ldr	r3, [pc, #292]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ee      	beq.n	8002a74 <HAL_RCC_OscConfig+0x334>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a98:	f7fe ffc8 	bl	8001a2c <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe ffc4 	bl	8001a2c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0b5      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab6:	4b3e      	ldr	r3, [pc, #248]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1ee      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac8:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	4a38      	ldr	r2, [pc, #224]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80a1 	beq.w	8002c20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ade:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d05c      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d141      	bne.n	8002b76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <HAL_RCC_OscConfig+0x478>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fe ff98 	bl	8001a2c <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe ff94 	bl	8001a2c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e087      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	019b      	lsls	r3, r3, #6
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	3b01      	subs	r3, #1
 8002b38:	041b      	lsls	r3, r3, #16
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	491b      	ldr	r1, [pc, #108]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_RCC_OscConfig+0x478>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fe ff6d 	bl	8001a2c <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fe ff69 	bl	8001a2c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e05c      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x416>
 8002b74:	e054      	b.n	8002c20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_RCC_OscConfig+0x478>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe ff56 	bl	8001a2c <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe ff52 	bl	8001a2c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e045      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x444>
 8002ba2:	e03d      	b.n	8002c20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e038      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_RCC_OscConfig+0x4ec>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d028      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d121      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d11a      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d111      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	085b      	lsrs	r3, r3, #1
 8002c04:	3b01      	subs	r3, #1
 8002c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800

08002c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0cc      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c44:	4b68      	ldr	r3, [pc, #416]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d90c      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0b8      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d020      	beq.n	8002cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c84:	4b59      	ldr	r3, [pc, #356]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a58      	ldr	r2, [pc, #352]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c9c:	4b53      	ldr	r3, [pc, #332]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca8:	4b50      	ldr	r3, [pc, #320]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	494d      	ldr	r1, [pc, #308]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d044      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	4b47      	ldr	r3, [pc, #284]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d119      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e07f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cee:	4b3f      	ldr	r3, [pc, #252]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e06f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfe:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e067      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0e:	4b37      	ldr	r3, [pc, #220]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f023 0203 	bic.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4934      	ldr	r1, [pc, #208]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d20:	f7fe fe84 	bl	8001a2c <HAL_GetTick>
 8002d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d28:	f7fe fe80 	bl	8001a2c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e04f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 020c 	and.w	r2, r3, #12
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d1eb      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d20c      	bcs.n	8002d78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5e:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e032      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4916      	ldr	r1, [pc, #88]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	490e      	ldr	r1, [pc, #56]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002db6:	f000 f821 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	490a      	ldr	r1, [pc, #40]	; (8002df0 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	5ccb      	ldrb	r3, [r1, r3]
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	4a09      	ldr	r2, [pc, #36]	; (8002df4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe fde4 	bl	80019a4 <HAL_InitTick>

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40023c00 	.word	0x40023c00
 8002dec:	40023800 	.word	0x40023800
 8002df0:	08004f5c 	.word	0x08004f5c
 8002df4:	20000000 	.word	0x20000000
 8002df8:	20000004 	.word	0x20000004

08002dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e00:	b094      	sub	sp, #80	; 0x50
 8002e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	647b      	str	r3, [r7, #68]	; 0x44
 8002e08:	2300      	movs	r3, #0
 8002e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e14:	4b79      	ldr	r3, [pc, #484]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d00d      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x40>
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	f200 80e1 	bhi.w	8002fe8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x34>
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d003      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e2e:	e0db      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b73      	ldr	r3, [pc, #460]	; (8003000 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e34:	e0db      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e36:	4b73      	ldr	r3, [pc, #460]	; (8003004 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e3a:	e0d8      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e3c:	4b6f      	ldr	r3, [pc, #444]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e46:	4b6d      	ldr	r3, [pc, #436]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d063      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e52:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	099b      	lsrs	r3, r3, #6
 8002e58:	2200      	movs	r2, #0
 8002e5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
 8002e66:	2300      	movs	r3, #0
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
 8002e6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e6e:	4622      	mov	r2, r4
 8002e70:	462b      	mov	r3, r5
 8002e72:	f04f 0000 	mov.w	r0, #0
 8002e76:	f04f 0100 	mov.w	r1, #0
 8002e7a:	0159      	lsls	r1, r3, #5
 8002e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e80:	0150      	lsls	r0, r2, #5
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4621      	mov	r1, r4
 8002e88:	1a51      	subs	r1, r2, r1
 8002e8a:	6139      	str	r1, [r7, #16]
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ea0:	4659      	mov	r1, fp
 8002ea2:	018b      	lsls	r3, r1, #6
 8002ea4:	4651      	mov	r1, sl
 8002ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eaa:	4651      	mov	r1, sl
 8002eac:	018a      	lsls	r2, r1, #6
 8002eae:	4651      	mov	r1, sl
 8002eb0:	ebb2 0801 	subs.w	r8, r2, r1
 8002eb4:	4659      	mov	r1, fp
 8002eb6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ece:	4690      	mov	r8, r2
 8002ed0:	4699      	mov	r9, r3
 8002ed2:	4623      	mov	r3, r4
 8002ed4:	eb18 0303 	adds.w	r3, r8, r3
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	462b      	mov	r3, r5
 8002edc:	eb49 0303 	adc.w	r3, r9, r3
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002eee:	4629      	mov	r1, r5
 8002ef0:	024b      	lsls	r3, r1, #9
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ef8:	4621      	mov	r1, r4
 8002efa:	024a      	lsls	r2, r1, #9
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f02:	2200      	movs	r2, #0
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f0c:	f7fd f9b8 	bl	8000280 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4613      	mov	r3, r2
 8002f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f18:	e058      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1a:	4b38      	ldr	r3, [pc, #224]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	2200      	movs	r2, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	4611      	mov	r1, r2
 8002f26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f2a:	623b      	str	r3, [r7, #32]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f34:	4642      	mov	r2, r8
 8002f36:	464b      	mov	r3, r9
 8002f38:	f04f 0000 	mov.w	r0, #0
 8002f3c:	f04f 0100 	mov.w	r1, #0
 8002f40:	0159      	lsls	r1, r3, #5
 8002f42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f46:	0150      	lsls	r0, r2, #5
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f52:	4649      	mov	r1, r9
 8002f54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f70:	eb63 050b 	sbc.w	r5, r3, fp
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	00eb      	lsls	r3, r5, #3
 8002f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f82:	00e2      	lsls	r2, r4, #3
 8002f84:	4614      	mov	r4, r2
 8002f86:	461d      	mov	r5, r3
 8002f88:	4643      	mov	r3, r8
 8002f8a:	18e3      	adds	r3, r4, r3
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	464b      	mov	r3, r9
 8002f90:	eb45 0303 	adc.w	r3, r5, r3
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	028b      	lsls	r3, r1, #10
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fac:	4621      	mov	r1, r4
 8002fae:	028a      	lsls	r2, r1, #10
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	61fa      	str	r2, [r7, #28]
 8002fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc0:	f7fd f95e 	bl	8000280 <__aeabi_uldivmod>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4613      	mov	r3, r2
 8002fca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	0c1b      	lsrs	r3, r3, #16
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fe6:	e002      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3750      	adds	r7, #80	; 0x50
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	00f42400 	.word	0x00f42400
 8003004:	007a1200 	.word	0x007a1200

08003008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e07b      	b.n	8003112 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800302a:	d009      	beq.n	8003040 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	61da      	str	r2, [r3, #28]
 8003032:	e005      	b.n	8003040 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fe fa70 	bl	8001540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003076:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c4:	ea42 0103 	orr.w	r1, r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	f003 0104 	and.w	r1, r3, #4
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	f003 0210 	and.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003100:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b088      	sub	sp, #32
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	603b      	str	r3, [r7, #0]
 8003126:	4613      	mov	r3, r2
 8003128:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_SPI_Transmit+0x22>
 8003138:	2302      	movs	r3, #2
 800313a:	e126      	b.n	800338a <HAL_SPI_Transmit+0x270>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003144:	f7fe fc72 	bl	8001a2c <HAL_GetTick>
 8003148:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b01      	cmp	r3, #1
 8003158:	d002      	beq.n	8003160 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800315a:	2302      	movs	r3, #2
 800315c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800315e:	e10b      	b.n	8003378 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_SPI_Transmit+0x52>
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d102      	bne.n	8003172 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003170:	e102      	b.n	8003378 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2203      	movs	r2, #3
 8003176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	88fa      	ldrh	r2, [r7, #6]
 800318a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	88fa      	ldrh	r2, [r7, #6]
 8003190:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b8:	d10f      	bne.n	80031da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d007      	beq.n	80031f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003200:	d14b      	bne.n	800329a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_SPI_Transmit+0xf6>
 800320a:	8afb      	ldrh	r3, [r7, #22]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d13e      	bne.n	800328e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	881a      	ldrh	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	1c9a      	adds	r2, r3, #2
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003234:	e02b      	b.n	800328e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b02      	cmp	r3, #2
 8003242:	d112      	bne.n	800326a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	881a      	ldrh	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	1c9a      	adds	r2, r3, #2
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	86da      	strh	r2, [r3, #54]	; 0x36
 8003268:	e011      	b.n	800328e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800326a:	f7fe fbdf 	bl	8001a2c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d803      	bhi.n	8003282 <HAL_SPI_Transmit+0x168>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d102      	bne.n	8003288 <HAL_SPI_Transmit+0x16e>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800328c:	e074      	b.n	8003378 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ce      	bne.n	8003236 <HAL_SPI_Transmit+0x11c>
 8003298:	e04c      	b.n	8003334 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_SPI_Transmit+0x18e>
 80032a2:	8afb      	ldrh	r3, [r7, #22]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d140      	bne.n	800332a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	330c      	adds	r3, #12
 80032b2:	7812      	ldrb	r2, [r2, #0]
 80032b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80032ce:	e02c      	b.n	800332a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d113      	bne.n	8003306 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	330c      	adds	r3, #12
 80032e8:	7812      	ldrb	r2, [r2, #0]
 80032ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	86da      	strh	r2, [r3, #54]	; 0x36
 8003304:	e011      	b.n	800332a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003306:	f7fe fb91 	bl	8001a2c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d803      	bhi.n	800331e <HAL_SPI_Transmit+0x204>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d102      	bne.n	8003324 <HAL_SPI_Transmit+0x20a>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003328:	e026      	b.n	8003378 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1cd      	bne.n	80032d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	6839      	ldr	r1, [r7, #0]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fbcb 	bl	8003ad4 <SPI_EndRxTxTransaction>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10a      	bne.n	8003368 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e000      	b.n	8003378 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003376:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003388:	7ffb      	ldrb	r3, [r7, #31]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b088      	sub	sp, #32
 8003396:	af02      	add	r7, sp, #8
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ae:	d112      	bne.n	80033d6 <HAL_SPI_Receive+0x44>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10e      	bne.n	80033d6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2204      	movs	r2, #4
 80033bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80033c0:	88fa      	ldrh	r2, [r7, #6]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	4613      	mov	r3, r2
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f8f1 	bl	80035b4 <HAL_SPI_TransmitReceive>
 80033d2:	4603      	mov	r3, r0
 80033d4:	e0ea      	b.n	80035ac <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_SPI_Receive+0x52>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e0e3      	b.n	80035ac <HAL_SPI_Receive+0x21a>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033ec:	f7fe fb1e 	bl	8001a2c <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d002      	beq.n	8003404 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
 8003400:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003402:	e0ca      	b.n	800359a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_SPI_Receive+0x7e>
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003414:	e0c1      	b.n	800359a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2204      	movs	r2, #4
 800341a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	88fa      	ldrh	r2, [r7, #6]
 800342e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	88fa      	ldrh	r2, [r7, #6]
 8003434:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345c:	d10f      	bne.n	800347e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800346c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800347c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003488:	2b40      	cmp	r3, #64	; 0x40
 800348a:	d007      	beq.n	800349c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d162      	bne.n	800356a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80034a4:	e02e      	b.n	8003504 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d115      	bne.n	80034e0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f103 020c 	add.w	r2, r3, #12
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034de:	e011      	b.n	8003504 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e0:	f7fe faa4 	bl	8001a2c <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d803      	bhi.n	80034f8 <HAL_SPI_Receive+0x166>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d102      	bne.n	80034fe <HAL_SPI_Receive+0x16c>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003502:	e04a      	b.n	800359a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1cb      	bne.n	80034a6 <HAL_SPI_Receive+0x114>
 800350e:	e031      	b.n	8003574 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b01      	cmp	r3, #1
 800351c:	d113      	bne.n	8003546 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	b292      	uxth	r2, r2
 800352a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	1c9a      	adds	r2, r3, #2
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003544:	e011      	b.n	800356a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003546:	f7fe fa71 	bl	8001a2c <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d803      	bhi.n	800355e <HAL_SPI_Receive+0x1cc>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d102      	bne.n	8003564 <HAL_SPI_Receive+0x1d2>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003568:	e017      	b.n	800359a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1cd      	bne.n	8003510 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	6839      	ldr	r1, [r7, #0]
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fa45 	bl	8003a08 <SPI_EndRxTransaction>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	75fb      	strb	r3, [r7, #23]
 8003596:	e000      	b.n	800359a <HAL_SPI_Receive+0x208>
  }

error :
 8003598:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08c      	sub	sp, #48	; 0x30
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035c2:	2301      	movs	r3, #1
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_SPI_TransmitReceive+0x26>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e18a      	b.n	80038f0 <HAL_SPI_TransmitReceive+0x33c>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035e2:	f7fe fa23 	bl	8001a2c <HAL_GetTick>
 80035e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80035f8:	887b      	ldrh	r3, [r7, #2]
 80035fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003600:	2b01      	cmp	r3, #1
 8003602:	d00f      	beq.n	8003624 <HAL_SPI_TransmitReceive+0x70>
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800360a:	d107      	bne.n	800361c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d103      	bne.n	800361c <HAL_SPI_TransmitReceive+0x68>
 8003614:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003618:	2b04      	cmp	r3, #4
 800361a:	d003      	beq.n	8003624 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800361c:	2302      	movs	r3, #2
 800361e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003622:	e15b      	b.n	80038dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_SPI_TransmitReceive+0x82>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_SPI_TransmitReceive+0x82>
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800363c:	e14e      	b.n	80038dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b04      	cmp	r3, #4
 8003648:	d003      	beq.n	8003652 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2205      	movs	r2, #5
 800364e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	887a      	ldrh	r2, [r7, #2]
 8003662:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	887a      	ldrh	r2, [r7, #2]
 8003668:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	887a      	ldrh	r2, [r7, #2]
 800367a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d007      	beq.n	80036a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ae:	d178      	bne.n	80037a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_SPI_TransmitReceive+0x10a>
 80036b8:	8b7b      	ldrh	r3, [r7, #26]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d166      	bne.n	800378c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	881a      	ldrh	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	1c9a      	adds	r2, r3, #2
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036e2:	e053      	b.n	800378c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d11b      	bne.n	800372a <HAL_SPI_TransmitReceive+0x176>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d016      	beq.n	800372a <HAL_SPI_TransmitReceive+0x176>
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d113      	bne.n	800372a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	881a      	ldrh	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	1c9a      	adds	r2, r3, #2
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d119      	bne.n	800376c <HAL_SPI_TransmitReceive+0x1b8>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d014      	beq.n	800376c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	b292      	uxth	r2, r2
 800374e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	1c9a      	adds	r2, r3, #2
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003768:	2301      	movs	r3, #1
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800376c:	f7fe f95e 	bl	8001a2c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003778:	429a      	cmp	r2, r3
 800377a:	d807      	bhi.n	800378c <HAL_SPI_TransmitReceive+0x1d8>
 800377c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003782:	d003      	beq.n	800378c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800378a:	e0a7      	b.n	80038dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1a6      	bne.n	80036e4 <HAL_SPI_TransmitReceive+0x130>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1a1      	bne.n	80036e4 <HAL_SPI_TransmitReceive+0x130>
 80037a0:	e07c      	b.n	800389c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_SPI_TransmitReceive+0x1fc>
 80037aa:	8b7b      	ldrh	r3, [r7, #26]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d16b      	bne.n	8003888 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	330c      	adds	r3, #12
 80037ba:	7812      	ldrb	r2, [r2, #0]
 80037bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037d6:	e057      	b.n	8003888 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d11c      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x26c>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d017      	beq.n	8003820 <HAL_SPI_TransmitReceive+0x26c>
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d114      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	330c      	adds	r3, #12
 8003800:	7812      	ldrb	r2, [r2, #0]
 8003802:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b01      	cmp	r3, #1
 800382c:	d119      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x2ae>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d014      	beq.n	8003862 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800385e:	2301      	movs	r3, #1
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003862:	f7fe f8e3 	bl	8001a2c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800386e:	429a      	cmp	r2, r3
 8003870:	d803      	bhi.n	800387a <HAL_SPI_TransmitReceive+0x2c6>
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d102      	bne.n	8003880 <HAL_SPI_TransmitReceive+0x2cc>
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	2b00      	cmp	r3, #0
 800387e:	d103      	bne.n	8003888 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003886:	e029      	b.n	80038dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1a2      	bne.n	80037d8 <HAL_SPI_TransmitReceive+0x224>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d19d      	bne.n	80037d8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800389c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f917 	bl	8003ad4 <SPI_EndRxTxTransaction>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d006      	beq.n	80038ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80038b8:	e010      	b.n	80038dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	e000      	b.n	80038dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80038da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3730      	adds	r7, #48	; 0x30
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003908:	f7fe f890 	bl	8001a2c <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	4413      	add	r3, r2
 8003916:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003918:	f7fe f888 	bl	8001a2c <HAL_GetTick>
 800391c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800391e:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	015b      	lsls	r3, r3, #5
 8003924:	0d1b      	lsrs	r3, r3, #20
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	fb02 f303 	mul.w	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800392e:	e054      	b.n	80039da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d050      	beq.n	80039da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003938:	f7fe f878 	bl	8001a2c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	429a      	cmp	r2, r3
 8003946:	d902      	bls.n	800394e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d13d      	bne.n	80039ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800395c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003966:	d111      	bne.n	800398c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003970:	d004      	beq.n	800397c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397a:	d107      	bne.n	800398c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800398a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003994:	d10f      	bne.n	80039b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e017      	b.n	80039fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4013      	ands	r3, r2
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	bf0c      	ite	eq
 80039ea:	2301      	moveq	r3, #1
 80039ec:	2300      	movne	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d19b      	bne.n	8003930 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3720      	adds	r7, #32
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000000 	.word	0x20000000

08003a08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a1c:	d111      	bne.n	8003a42 <SPI_EndRxTransaction+0x3a>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a26:	d004      	beq.n	8003a32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a30:	d107      	bne.n	8003a42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a40:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a4a:	d12a      	bne.n	8003aa2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a54:	d012      	beq.n	8003a7c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2180      	movs	r1, #128	; 0x80
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f7ff ff49 	bl	80038f8 <SPI_WaitFlagStateUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d02d      	beq.n	8003ac8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e026      	b.n	8003aca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2200      	movs	r2, #0
 8003a84:	2101      	movs	r1, #1
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f7ff ff36 	bl	80038f8 <SPI_WaitFlagStateUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01a      	beq.n	8003ac8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	f043 0220 	orr.w	r2, r3, #32
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e013      	b.n	8003aca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2101      	movs	r1, #1
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f7ff ff23 	bl	80038f8 <SPI_WaitFlagStateUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abc:	f043 0220 	orr.w	r2, r3, #32
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e000      	b.n	8003aca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <SPI_EndRxTxTransaction+0x7c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <SPI_EndRxTxTransaction+0x80>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0d5b      	lsrs	r3, r3, #21
 8003aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003af0:	fb02 f303 	mul.w	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afe:	d112      	bne.n	8003b26 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2200      	movs	r2, #0
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7ff fef4 	bl	80038f8 <SPI_WaitFlagStateUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d016      	beq.n	8003b44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	f043 0220 	orr.w	r2, r3, #32
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e00f      	b.n	8003b46 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3c:	2b80      	cmp	r3, #128	; 0x80
 8003b3e:	d0f2      	beq.n	8003b26 <SPI_EndRxTxTransaction+0x52>
 8003b40:	e000      	b.n	8003b44 <SPI_EndRxTxTransaction+0x70>
        break;
 8003b42:	bf00      	nop
  }

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000000 	.word	0x20000000
 8003b54:	165e9f81 	.word	0x165e9f81

08003b58 <__errno>:
 8003b58:	4b01      	ldr	r3, [pc, #4]	; (8003b60 <__errno+0x8>)
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	2000000c 	.word	0x2000000c

08003b64 <__libc_init_array>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	4d0d      	ldr	r5, [pc, #52]	; (8003b9c <__libc_init_array+0x38>)
 8003b68:	4c0d      	ldr	r4, [pc, #52]	; (8003ba0 <__libc_init_array+0x3c>)
 8003b6a:	1b64      	subs	r4, r4, r5
 8003b6c:	10a4      	asrs	r4, r4, #2
 8003b6e:	2600      	movs	r6, #0
 8003b70:	42a6      	cmp	r6, r4
 8003b72:	d109      	bne.n	8003b88 <__libc_init_array+0x24>
 8003b74:	4d0b      	ldr	r5, [pc, #44]	; (8003ba4 <__libc_init_array+0x40>)
 8003b76:	4c0c      	ldr	r4, [pc, #48]	; (8003ba8 <__libc_init_array+0x44>)
 8003b78:	f001 f886 	bl	8004c88 <_init>
 8003b7c:	1b64      	subs	r4, r4, r5
 8003b7e:	10a4      	asrs	r4, r4, #2
 8003b80:	2600      	movs	r6, #0
 8003b82:	42a6      	cmp	r6, r4
 8003b84:	d105      	bne.n	8003b92 <__libc_init_array+0x2e>
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
 8003b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8c:	4798      	blx	r3
 8003b8e:	3601      	adds	r6, #1
 8003b90:	e7ee      	b.n	8003b70 <__libc_init_array+0xc>
 8003b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b96:	4798      	blx	r3
 8003b98:	3601      	adds	r6, #1
 8003b9a:	e7f2      	b.n	8003b82 <__libc_init_array+0x1e>
 8003b9c:	080050bc 	.word	0x080050bc
 8003ba0:	080050bc 	.word	0x080050bc
 8003ba4:	080050bc 	.word	0x080050bc
 8003ba8:	080050c0 	.word	0x080050c0

08003bac <memset>:
 8003bac:	4402      	add	r2, r0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d100      	bne.n	8003bb6 <memset+0xa>
 8003bb4:	4770      	bx	lr
 8003bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bba:	e7f9      	b.n	8003bb0 <memset+0x4>

08003bbc <srand>:
 8003bbc:	b538      	push	{r3, r4, r5, lr}
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <srand+0x44>)
 8003bc0:	681d      	ldr	r5, [r3, #0]
 8003bc2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	b9b3      	cbnz	r3, 8003bf6 <srand+0x3a>
 8003bc8:	2018      	movs	r0, #24
 8003bca:	f000 f893 	bl	8003cf4 <malloc>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	63a8      	str	r0, [r5, #56]	; 0x38
 8003bd2:	b920      	cbnz	r0, 8003bde <srand+0x22>
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <srand+0x48>)
 8003bd6:	480c      	ldr	r0, [pc, #48]	; (8003c08 <srand+0x4c>)
 8003bd8:	2142      	movs	r1, #66	; 0x42
 8003bda:	f000 f85b 	bl	8003c94 <__assert_func>
 8003bde:	490b      	ldr	r1, [pc, #44]	; (8003c0c <srand+0x50>)
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <srand+0x54>)
 8003be2:	e9c0 1300 	strd	r1, r3, [r0]
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <srand+0x58>)
 8003be8:	6083      	str	r3, [r0, #8]
 8003bea:	230b      	movs	r3, #11
 8003bec:	8183      	strh	r3, [r0, #12]
 8003bee:	2100      	movs	r1, #0
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003bf6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	611c      	str	r4, [r3, #16]
 8003bfc:	615a      	str	r2, [r3, #20]
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
 8003c00:	2000000c 	.word	0x2000000c
 8003c04:	08004f70 	.word	0x08004f70
 8003c08:	08004f87 	.word	0x08004f87
 8003c0c:	abcd330e 	.word	0xabcd330e
 8003c10:	e66d1234 	.word	0xe66d1234
 8003c14:	0005deec 	.word	0x0005deec

08003c18 <rand>:
 8003c18:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <rand+0x5c>)
 8003c1a:	b510      	push	{r4, lr}
 8003c1c:	681c      	ldr	r4, [r3, #0]
 8003c1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c20:	b9b3      	cbnz	r3, 8003c50 <rand+0x38>
 8003c22:	2018      	movs	r0, #24
 8003c24:	f000 f866 	bl	8003cf4 <malloc>
 8003c28:	63a0      	str	r0, [r4, #56]	; 0x38
 8003c2a:	b928      	cbnz	r0, 8003c38 <rand+0x20>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <rand+0x60>)
 8003c30:	4812      	ldr	r0, [pc, #72]	; (8003c7c <rand+0x64>)
 8003c32:	214e      	movs	r1, #78	; 0x4e
 8003c34:	f000 f82e 	bl	8003c94 <__assert_func>
 8003c38:	4a11      	ldr	r2, [pc, #68]	; (8003c80 <rand+0x68>)
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <rand+0x6c>)
 8003c3c:	e9c0 2300 	strd	r2, r3, [r0]
 8003c40:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <rand+0x70>)
 8003c42:	6083      	str	r3, [r0, #8]
 8003c44:	230b      	movs	r3, #11
 8003c46:	8183      	strh	r3, [r0, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003c50:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003c52:	4a0e      	ldr	r2, [pc, #56]	; (8003c8c <rand+0x74>)
 8003c54:	6920      	ldr	r0, [r4, #16]
 8003c56:	6963      	ldr	r3, [r4, #20]
 8003c58:	490d      	ldr	r1, [pc, #52]	; (8003c90 <rand+0x78>)
 8003c5a:	4342      	muls	r2, r0
 8003c5c:	fb01 2203 	mla	r2, r1, r3, r2
 8003c60:	fba0 0101 	umull	r0, r1, r0, r1
 8003c64:	1c43      	adds	r3, r0, #1
 8003c66:	eb42 0001 	adc.w	r0, r2, r1
 8003c6a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8003c6e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c72:	bd10      	pop	{r4, pc}
 8003c74:	2000000c 	.word	0x2000000c
 8003c78:	08004f70 	.word	0x08004f70
 8003c7c:	08004f87 	.word	0x08004f87
 8003c80:	abcd330e 	.word	0xabcd330e
 8003c84:	e66d1234 	.word	0xe66d1234
 8003c88:	0005deec 	.word	0x0005deec
 8003c8c:	5851f42d 	.word	0x5851f42d
 8003c90:	4c957f2d 	.word	0x4c957f2d

08003c94 <__assert_func>:
 8003c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c96:	4614      	mov	r4, r2
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <__assert_func+0x2c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	68d8      	ldr	r0, [r3, #12]
 8003ca2:	b14c      	cbz	r4, 8003cb8 <__assert_func+0x24>
 8003ca4:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <__assert_func+0x30>)
 8003ca6:	9100      	str	r1, [sp, #0]
 8003ca8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003cac:	4906      	ldr	r1, [pc, #24]	; (8003cc8 <__assert_func+0x34>)
 8003cae:	462b      	mov	r3, r5
 8003cb0:	f000 f80e 	bl	8003cd0 <fiprintf>
 8003cb4:	f000 fcc4 	bl	8004640 <abort>
 8003cb8:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <__assert_func+0x38>)
 8003cba:	461c      	mov	r4, r3
 8003cbc:	e7f3      	b.n	8003ca6 <__assert_func+0x12>
 8003cbe:	bf00      	nop
 8003cc0:	2000000c 	.word	0x2000000c
 8003cc4:	08004fe2 	.word	0x08004fe2
 8003cc8:	08004fef 	.word	0x08004fef
 8003ccc:	0800501d 	.word	0x0800501d

08003cd0 <fiprintf>:
 8003cd0:	b40e      	push	{r1, r2, r3}
 8003cd2:	b503      	push	{r0, r1, lr}
 8003cd4:	4601      	mov	r1, r0
 8003cd6:	ab03      	add	r3, sp, #12
 8003cd8:	4805      	ldr	r0, [pc, #20]	; (8003cf0 <fiprintf+0x20>)
 8003cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cde:	6800      	ldr	r0, [r0, #0]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	f000 f919 	bl	8003f18 <_vfiprintf_r>
 8003ce6:	b002      	add	sp, #8
 8003ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cec:	b003      	add	sp, #12
 8003cee:	4770      	bx	lr
 8003cf0:	2000000c 	.word	0x2000000c

08003cf4 <malloc>:
 8003cf4:	4b02      	ldr	r3, [pc, #8]	; (8003d00 <malloc+0xc>)
 8003cf6:	4601      	mov	r1, r0
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	f000 b86f 	b.w	8003ddc <_malloc_r>
 8003cfe:	bf00      	nop
 8003d00:	2000000c 	.word	0x2000000c

08003d04 <_free_r>:
 8003d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d06:	2900      	cmp	r1, #0
 8003d08:	d044      	beq.n	8003d94 <_free_r+0x90>
 8003d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d0e:	9001      	str	r0, [sp, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f1a1 0404 	sub.w	r4, r1, #4
 8003d16:	bfb8      	it	lt
 8003d18:	18e4      	addlt	r4, r4, r3
 8003d1a:	f000 feb9 	bl	8004a90 <__malloc_lock>
 8003d1e:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <_free_r+0x94>)
 8003d20:	9801      	ldr	r0, [sp, #4]
 8003d22:	6813      	ldr	r3, [r2, #0]
 8003d24:	b933      	cbnz	r3, 8003d34 <_free_r+0x30>
 8003d26:	6063      	str	r3, [r4, #4]
 8003d28:	6014      	str	r4, [r2, #0]
 8003d2a:	b003      	add	sp, #12
 8003d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d30:	f000 beb4 	b.w	8004a9c <__malloc_unlock>
 8003d34:	42a3      	cmp	r3, r4
 8003d36:	d908      	bls.n	8003d4a <_free_r+0x46>
 8003d38:	6825      	ldr	r5, [r4, #0]
 8003d3a:	1961      	adds	r1, r4, r5
 8003d3c:	428b      	cmp	r3, r1
 8003d3e:	bf01      	itttt	eq
 8003d40:	6819      	ldreq	r1, [r3, #0]
 8003d42:	685b      	ldreq	r3, [r3, #4]
 8003d44:	1949      	addeq	r1, r1, r5
 8003d46:	6021      	streq	r1, [r4, #0]
 8003d48:	e7ed      	b.n	8003d26 <_free_r+0x22>
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	b10b      	cbz	r3, 8003d54 <_free_r+0x50>
 8003d50:	42a3      	cmp	r3, r4
 8003d52:	d9fa      	bls.n	8003d4a <_free_r+0x46>
 8003d54:	6811      	ldr	r1, [r2, #0]
 8003d56:	1855      	adds	r5, r2, r1
 8003d58:	42a5      	cmp	r5, r4
 8003d5a:	d10b      	bne.n	8003d74 <_free_r+0x70>
 8003d5c:	6824      	ldr	r4, [r4, #0]
 8003d5e:	4421      	add	r1, r4
 8003d60:	1854      	adds	r4, r2, r1
 8003d62:	42a3      	cmp	r3, r4
 8003d64:	6011      	str	r1, [r2, #0]
 8003d66:	d1e0      	bne.n	8003d2a <_free_r+0x26>
 8003d68:	681c      	ldr	r4, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	6053      	str	r3, [r2, #4]
 8003d6e:	4421      	add	r1, r4
 8003d70:	6011      	str	r1, [r2, #0]
 8003d72:	e7da      	b.n	8003d2a <_free_r+0x26>
 8003d74:	d902      	bls.n	8003d7c <_free_r+0x78>
 8003d76:	230c      	movs	r3, #12
 8003d78:	6003      	str	r3, [r0, #0]
 8003d7a:	e7d6      	b.n	8003d2a <_free_r+0x26>
 8003d7c:	6825      	ldr	r5, [r4, #0]
 8003d7e:	1961      	adds	r1, r4, r5
 8003d80:	428b      	cmp	r3, r1
 8003d82:	bf04      	itt	eq
 8003d84:	6819      	ldreq	r1, [r3, #0]
 8003d86:	685b      	ldreq	r3, [r3, #4]
 8003d88:	6063      	str	r3, [r4, #4]
 8003d8a:	bf04      	itt	eq
 8003d8c:	1949      	addeq	r1, r1, r5
 8003d8e:	6021      	streq	r1, [r4, #0]
 8003d90:	6054      	str	r4, [r2, #4]
 8003d92:	e7ca      	b.n	8003d2a <_free_r+0x26>
 8003d94:	b003      	add	sp, #12
 8003d96:	bd30      	pop	{r4, r5, pc}
 8003d98:	20003c48 	.word	0x20003c48

08003d9c <sbrk_aligned>:
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	4e0e      	ldr	r6, [pc, #56]	; (8003dd8 <sbrk_aligned+0x3c>)
 8003da0:	460c      	mov	r4, r1
 8003da2:	6831      	ldr	r1, [r6, #0]
 8003da4:	4605      	mov	r5, r0
 8003da6:	b911      	cbnz	r1, 8003dae <sbrk_aligned+0x12>
 8003da8:	f000 fb7a 	bl	80044a0 <_sbrk_r>
 8003dac:	6030      	str	r0, [r6, #0]
 8003dae:	4621      	mov	r1, r4
 8003db0:	4628      	mov	r0, r5
 8003db2:	f000 fb75 	bl	80044a0 <_sbrk_r>
 8003db6:	1c43      	adds	r3, r0, #1
 8003db8:	d00a      	beq.n	8003dd0 <sbrk_aligned+0x34>
 8003dba:	1cc4      	adds	r4, r0, #3
 8003dbc:	f024 0403 	bic.w	r4, r4, #3
 8003dc0:	42a0      	cmp	r0, r4
 8003dc2:	d007      	beq.n	8003dd4 <sbrk_aligned+0x38>
 8003dc4:	1a21      	subs	r1, r4, r0
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	f000 fb6a 	bl	80044a0 <_sbrk_r>
 8003dcc:	3001      	adds	r0, #1
 8003dce:	d101      	bne.n	8003dd4 <sbrk_aligned+0x38>
 8003dd0:	f04f 34ff 	mov.w	r4, #4294967295
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	bd70      	pop	{r4, r5, r6, pc}
 8003dd8:	20003c4c 	.word	0x20003c4c

08003ddc <_malloc_r>:
 8003ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de0:	1ccd      	adds	r5, r1, #3
 8003de2:	f025 0503 	bic.w	r5, r5, #3
 8003de6:	3508      	adds	r5, #8
 8003de8:	2d0c      	cmp	r5, #12
 8003dea:	bf38      	it	cc
 8003dec:	250c      	movcc	r5, #12
 8003dee:	2d00      	cmp	r5, #0
 8003df0:	4607      	mov	r7, r0
 8003df2:	db01      	blt.n	8003df8 <_malloc_r+0x1c>
 8003df4:	42a9      	cmp	r1, r5
 8003df6:	d905      	bls.n	8003e04 <_malloc_r+0x28>
 8003df8:	230c      	movs	r3, #12
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	2600      	movs	r6, #0
 8003dfe:	4630      	mov	r0, r6
 8003e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e04:	4e2e      	ldr	r6, [pc, #184]	; (8003ec0 <_malloc_r+0xe4>)
 8003e06:	f000 fe43 	bl	8004a90 <__malloc_lock>
 8003e0a:	6833      	ldr	r3, [r6, #0]
 8003e0c:	461c      	mov	r4, r3
 8003e0e:	bb34      	cbnz	r4, 8003e5e <_malloc_r+0x82>
 8003e10:	4629      	mov	r1, r5
 8003e12:	4638      	mov	r0, r7
 8003e14:	f7ff ffc2 	bl	8003d9c <sbrk_aligned>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	d14d      	bne.n	8003eba <_malloc_r+0xde>
 8003e1e:	6834      	ldr	r4, [r6, #0]
 8003e20:	4626      	mov	r6, r4
 8003e22:	2e00      	cmp	r6, #0
 8003e24:	d140      	bne.n	8003ea8 <_malloc_r+0xcc>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	4631      	mov	r1, r6
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	eb04 0803 	add.w	r8, r4, r3
 8003e30:	f000 fb36 	bl	80044a0 <_sbrk_r>
 8003e34:	4580      	cmp	r8, r0
 8003e36:	d13a      	bne.n	8003eae <_malloc_r+0xd2>
 8003e38:	6821      	ldr	r1, [r4, #0]
 8003e3a:	3503      	adds	r5, #3
 8003e3c:	1a6d      	subs	r5, r5, r1
 8003e3e:	f025 0503 	bic.w	r5, r5, #3
 8003e42:	3508      	adds	r5, #8
 8003e44:	2d0c      	cmp	r5, #12
 8003e46:	bf38      	it	cc
 8003e48:	250c      	movcc	r5, #12
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	f7ff ffa5 	bl	8003d9c <sbrk_aligned>
 8003e52:	3001      	adds	r0, #1
 8003e54:	d02b      	beq.n	8003eae <_malloc_r+0xd2>
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	442b      	add	r3, r5
 8003e5a:	6023      	str	r3, [r4, #0]
 8003e5c:	e00e      	b.n	8003e7c <_malloc_r+0xa0>
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	1b52      	subs	r2, r2, r5
 8003e62:	d41e      	bmi.n	8003ea2 <_malloc_r+0xc6>
 8003e64:	2a0b      	cmp	r2, #11
 8003e66:	d916      	bls.n	8003e96 <_malloc_r+0xba>
 8003e68:	1961      	adds	r1, r4, r5
 8003e6a:	42a3      	cmp	r3, r4
 8003e6c:	6025      	str	r5, [r4, #0]
 8003e6e:	bf18      	it	ne
 8003e70:	6059      	strne	r1, [r3, #4]
 8003e72:	6863      	ldr	r3, [r4, #4]
 8003e74:	bf08      	it	eq
 8003e76:	6031      	streq	r1, [r6, #0]
 8003e78:	5162      	str	r2, [r4, r5]
 8003e7a:	604b      	str	r3, [r1, #4]
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	f104 060b 	add.w	r6, r4, #11
 8003e82:	f000 fe0b 	bl	8004a9c <__malloc_unlock>
 8003e86:	f026 0607 	bic.w	r6, r6, #7
 8003e8a:	1d23      	adds	r3, r4, #4
 8003e8c:	1af2      	subs	r2, r6, r3
 8003e8e:	d0b6      	beq.n	8003dfe <_malloc_r+0x22>
 8003e90:	1b9b      	subs	r3, r3, r6
 8003e92:	50a3      	str	r3, [r4, r2]
 8003e94:	e7b3      	b.n	8003dfe <_malloc_r+0x22>
 8003e96:	6862      	ldr	r2, [r4, #4]
 8003e98:	42a3      	cmp	r3, r4
 8003e9a:	bf0c      	ite	eq
 8003e9c:	6032      	streq	r2, [r6, #0]
 8003e9e:	605a      	strne	r2, [r3, #4]
 8003ea0:	e7ec      	b.n	8003e7c <_malloc_r+0xa0>
 8003ea2:	4623      	mov	r3, r4
 8003ea4:	6864      	ldr	r4, [r4, #4]
 8003ea6:	e7b2      	b.n	8003e0e <_malloc_r+0x32>
 8003ea8:	4634      	mov	r4, r6
 8003eaa:	6876      	ldr	r6, [r6, #4]
 8003eac:	e7b9      	b.n	8003e22 <_malloc_r+0x46>
 8003eae:	230c      	movs	r3, #12
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	f000 fdf2 	bl	8004a9c <__malloc_unlock>
 8003eb8:	e7a1      	b.n	8003dfe <_malloc_r+0x22>
 8003eba:	6025      	str	r5, [r4, #0]
 8003ebc:	e7de      	b.n	8003e7c <_malloc_r+0xa0>
 8003ebe:	bf00      	nop
 8003ec0:	20003c48 	.word	0x20003c48

08003ec4 <__sfputc_r>:
 8003ec4:	6893      	ldr	r3, [r2, #8]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	b410      	push	{r4}
 8003ecc:	6093      	str	r3, [r2, #8]
 8003ece:	da08      	bge.n	8003ee2 <__sfputc_r+0x1e>
 8003ed0:	6994      	ldr	r4, [r2, #24]
 8003ed2:	42a3      	cmp	r3, r4
 8003ed4:	db01      	blt.n	8003eda <__sfputc_r+0x16>
 8003ed6:	290a      	cmp	r1, #10
 8003ed8:	d103      	bne.n	8003ee2 <__sfputc_r+0x1e>
 8003eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ede:	f000 baef 	b.w	80044c0 <__swbuf_r>
 8003ee2:	6813      	ldr	r3, [r2, #0]
 8003ee4:	1c58      	adds	r0, r3, #1
 8003ee6:	6010      	str	r0, [r2, #0]
 8003ee8:	7019      	strb	r1, [r3, #0]
 8003eea:	4608      	mov	r0, r1
 8003eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <__sfputs_r>:
 8003ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef4:	4606      	mov	r6, r0
 8003ef6:	460f      	mov	r7, r1
 8003ef8:	4614      	mov	r4, r2
 8003efa:	18d5      	adds	r5, r2, r3
 8003efc:	42ac      	cmp	r4, r5
 8003efe:	d101      	bne.n	8003f04 <__sfputs_r+0x12>
 8003f00:	2000      	movs	r0, #0
 8003f02:	e007      	b.n	8003f14 <__sfputs_r+0x22>
 8003f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f08:	463a      	mov	r2, r7
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f7ff ffda 	bl	8003ec4 <__sfputc_r>
 8003f10:	1c43      	adds	r3, r0, #1
 8003f12:	d1f3      	bne.n	8003efc <__sfputs_r+0xa>
 8003f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f18 <_vfiprintf_r>:
 8003f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f1c:	460d      	mov	r5, r1
 8003f1e:	b09d      	sub	sp, #116	; 0x74
 8003f20:	4614      	mov	r4, r2
 8003f22:	4698      	mov	r8, r3
 8003f24:	4606      	mov	r6, r0
 8003f26:	b118      	cbz	r0, 8003f30 <_vfiprintf_r+0x18>
 8003f28:	6983      	ldr	r3, [r0, #24]
 8003f2a:	b90b      	cbnz	r3, 8003f30 <_vfiprintf_r+0x18>
 8003f2c:	f000 fcaa 	bl	8004884 <__sinit>
 8003f30:	4b89      	ldr	r3, [pc, #548]	; (8004158 <_vfiprintf_r+0x240>)
 8003f32:	429d      	cmp	r5, r3
 8003f34:	d11b      	bne.n	8003f6e <_vfiprintf_r+0x56>
 8003f36:	6875      	ldr	r5, [r6, #4]
 8003f38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f3a:	07d9      	lsls	r1, r3, #31
 8003f3c:	d405      	bmi.n	8003f4a <_vfiprintf_r+0x32>
 8003f3e:	89ab      	ldrh	r3, [r5, #12]
 8003f40:	059a      	lsls	r2, r3, #22
 8003f42:	d402      	bmi.n	8003f4a <_vfiprintf_r+0x32>
 8003f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f46:	f000 fd3b 	bl	80049c0 <__retarget_lock_acquire_recursive>
 8003f4a:	89ab      	ldrh	r3, [r5, #12]
 8003f4c:	071b      	lsls	r3, r3, #28
 8003f4e:	d501      	bpl.n	8003f54 <_vfiprintf_r+0x3c>
 8003f50:	692b      	ldr	r3, [r5, #16]
 8003f52:	b9eb      	cbnz	r3, 8003f90 <_vfiprintf_r+0x78>
 8003f54:	4629      	mov	r1, r5
 8003f56:	4630      	mov	r0, r6
 8003f58:	f000 fb04 	bl	8004564 <__swsetup_r>
 8003f5c:	b1c0      	cbz	r0, 8003f90 <_vfiprintf_r+0x78>
 8003f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f60:	07dc      	lsls	r4, r3, #31
 8003f62:	d50e      	bpl.n	8003f82 <_vfiprintf_r+0x6a>
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	b01d      	add	sp, #116	; 0x74
 8003f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6e:	4b7b      	ldr	r3, [pc, #492]	; (800415c <_vfiprintf_r+0x244>)
 8003f70:	429d      	cmp	r5, r3
 8003f72:	d101      	bne.n	8003f78 <_vfiprintf_r+0x60>
 8003f74:	68b5      	ldr	r5, [r6, #8]
 8003f76:	e7df      	b.n	8003f38 <_vfiprintf_r+0x20>
 8003f78:	4b79      	ldr	r3, [pc, #484]	; (8004160 <_vfiprintf_r+0x248>)
 8003f7a:	429d      	cmp	r5, r3
 8003f7c:	bf08      	it	eq
 8003f7e:	68f5      	ldreq	r5, [r6, #12]
 8003f80:	e7da      	b.n	8003f38 <_vfiprintf_r+0x20>
 8003f82:	89ab      	ldrh	r3, [r5, #12]
 8003f84:	0598      	lsls	r0, r3, #22
 8003f86:	d4ed      	bmi.n	8003f64 <_vfiprintf_r+0x4c>
 8003f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f8a:	f000 fd1a 	bl	80049c2 <__retarget_lock_release_recursive>
 8003f8e:	e7e9      	b.n	8003f64 <_vfiprintf_r+0x4c>
 8003f90:	2300      	movs	r3, #0
 8003f92:	9309      	str	r3, [sp, #36]	; 0x24
 8003f94:	2320      	movs	r3, #32
 8003f96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f9e:	2330      	movs	r3, #48	; 0x30
 8003fa0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004164 <_vfiprintf_r+0x24c>
 8003fa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fa8:	f04f 0901 	mov.w	r9, #1
 8003fac:	4623      	mov	r3, r4
 8003fae:	469a      	mov	sl, r3
 8003fb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fb4:	b10a      	cbz	r2, 8003fba <_vfiprintf_r+0xa2>
 8003fb6:	2a25      	cmp	r2, #37	; 0x25
 8003fb8:	d1f9      	bne.n	8003fae <_vfiprintf_r+0x96>
 8003fba:	ebba 0b04 	subs.w	fp, sl, r4
 8003fbe:	d00b      	beq.n	8003fd8 <_vfiprintf_r+0xc0>
 8003fc0:	465b      	mov	r3, fp
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	f7ff ff93 	bl	8003ef2 <__sfputs_r>
 8003fcc:	3001      	adds	r0, #1
 8003fce:	f000 80aa 	beq.w	8004126 <_vfiprintf_r+0x20e>
 8003fd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fd4:	445a      	add	r2, fp
 8003fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8003fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80a2 	beq.w	8004126 <_vfiprintf_r+0x20e>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fec:	f10a 0a01 	add.w	sl, sl, #1
 8003ff0:	9304      	str	r3, [sp, #16]
 8003ff2:	9307      	str	r3, [sp, #28]
 8003ff4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ff8:	931a      	str	r3, [sp, #104]	; 0x68
 8003ffa:	4654      	mov	r4, sl
 8003ffc:	2205      	movs	r2, #5
 8003ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004002:	4858      	ldr	r0, [pc, #352]	; (8004164 <_vfiprintf_r+0x24c>)
 8004004:	f7fc f8ec 	bl	80001e0 <memchr>
 8004008:	9a04      	ldr	r2, [sp, #16]
 800400a:	b9d8      	cbnz	r0, 8004044 <_vfiprintf_r+0x12c>
 800400c:	06d1      	lsls	r1, r2, #27
 800400e:	bf44      	itt	mi
 8004010:	2320      	movmi	r3, #32
 8004012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004016:	0713      	lsls	r3, r2, #28
 8004018:	bf44      	itt	mi
 800401a:	232b      	movmi	r3, #43	; 0x2b
 800401c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004020:	f89a 3000 	ldrb.w	r3, [sl]
 8004024:	2b2a      	cmp	r3, #42	; 0x2a
 8004026:	d015      	beq.n	8004054 <_vfiprintf_r+0x13c>
 8004028:	9a07      	ldr	r2, [sp, #28]
 800402a:	4654      	mov	r4, sl
 800402c:	2000      	movs	r0, #0
 800402e:	f04f 0c0a 	mov.w	ip, #10
 8004032:	4621      	mov	r1, r4
 8004034:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004038:	3b30      	subs	r3, #48	; 0x30
 800403a:	2b09      	cmp	r3, #9
 800403c:	d94e      	bls.n	80040dc <_vfiprintf_r+0x1c4>
 800403e:	b1b0      	cbz	r0, 800406e <_vfiprintf_r+0x156>
 8004040:	9207      	str	r2, [sp, #28]
 8004042:	e014      	b.n	800406e <_vfiprintf_r+0x156>
 8004044:	eba0 0308 	sub.w	r3, r0, r8
 8004048:	fa09 f303 	lsl.w	r3, r9, r3
 800404c:	4313      	orrs	r3, r2
 800404e:	9304      	str	r3, [sp, #16]
 8004050:	46a2      	mov	sl, r4
 8004052:	e7d2      	b.n	8003ffa <_vfiprintf_r+0xe2>
 8004054:	9b03      	ldr	r3, [sp, #12]
 8004056:	1d19      	adds	r1, r3, #4
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	9103      	str	r1, [sp, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	bfbb      	ittet	lt
 8004060:	425b      	neglt	r3, r3
 8004062:	f042 0202 	orrlt.w	r2, r2, #2
 8004066:	9307      	strge	r3, [sp, #28]
 8004068:	9307      	strlt	r3, [sp, #28]
 800406a:	bfb8      	it	lt
 800406c:	9204      	strlt	r2, [sp, #16]
 800406e:	7823      	ldrb	r3, [r4, #0]
 8004070:	2b2e      	cmp	r3, #46	; 0x2e
 8004072:	d10c      	bne.n	800408e <_vfiprintf_r+0x176>
 8004074:	7863      	ldrb	r3, [r4, #1]
 8004076:	2b2a      	cmp	r3, #42	; 0x2a
 8004078:	d135      	bne.n	80040e6 <_vfiprintf_r+0x1ce>
 800407a:	9b03      	ldr	r3, [sp, #12]
 800407c:	1d1a      	adds	r2, r3, #4
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	9203      	str	r2, [sp, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	bfb8      	it	lt
 8004086:	f04f 33ff 	movlt.w	r3, #4294967295
 800408a:	3402      	adds	r4, #2
 800408c:	9305      	str	r3, [sp, #20]
 800408e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004174 <_vfiprintf_r+0x25c>
 8004092:	7821      	ldrb	r1, [r4, #0]
 8004094:	2203      	movs	r2, #3
 8004096:	4650      	mov	r0, sl
 8004098:	f7fc f8a2 	bl	80001e0 <memchr>
 800409c:	b140      	cbz	r0, 80040b0 <_vfiprintf_r+0x198>
 800409e:	2340      	movs	r3, #64	; 0x40
 80040a0:	eba0 000a 	sub.w	r0, r0, sl
 80040a4:	fa03 f000 	lsl.w	r0, r3, r0
 80040a8:	9b04      	ldr	r3, [sp, #16]
 80040aa:	4303      	orrs	r3, r0
 80040ac:	3401      	adds	r4, #1
 80040ae:	9304      	str	r3, [sp, #16]
 80040b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040b4:	482c      	ldr	r0, [pc, #176]	; (8004168 <_vfiprintf_r+0x250>)
 80040b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040ba:	2206      	movs	r2, #6
 80040bc:	f7fc f890 	bl	80001e0 <memchr>
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d03f      	beq.n	8004144 <_vfiprintf_r+0x22c>
 80040c4:	4b29      	ldr	r3, [pc, #164]	; (800416c <_vfiprintf_r+0x254>)
 80040c6:	bb1b      	cbnz	r3, 8004110 <_vfiprintf_r+0x1f8>
 80040c8:	9b03      	ldr	r3, [sp, #12]
 80040ca:	3307      	adds	r3, #7
 80040cc:	f023 0307 	bic.w	r3, r3, #7
 80040d0:	3308      	adds	r3, #8
 80040d2:	9303      	str	r3, [sp, #12]
 80040d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040d6:	443b      	add	r3, r7
 80040d8:	9309      	str	r3, [sp, #36]	; 0x24
 80040da:	e767      	b.n	8003fac <_vfiprintf_r+0x94>
 80040dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80040e0:	460c      	mov	r4, r1
 80040e2:	2001      	movs	r0, #1
 80040e4:	e7a5      	b.n	8004032 <_vfiprintf_r+0x11a>
 80040e6:	2300      	movs	r3, #0
 80040e8:	3401      	adds	r4, #1
 80040ea:	9305      	str	r3, [sp, #20]
 80040ec:	4619      	mov	r1, r3
 80040ee:	f04f 0c0a 	mov.w	ip, #10
 80040f2:	4620      	mov	r0, r4
 80040f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040f8:	3a30      	subs	r2, #48	; 0x30
 80040fa:	2a09      	cmp	r2, #9
 80040fc:	d903      	bls.n	8004106 <_vfiprintf_r+0x1ee>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0c5      	beq.n	800408e <_vfiprintf_r+0x176>
 8004102:	9105      	str	r1, [sp, #20]
 8004104:	e7c3      	b.n	800408e <_vfiprintf_r+0x176>
 8004106:	fb0c 2101 	mla	r1, ip, r1, r2
 800410a:	4604      	mov	r4, r0
 800410c:	2301      	movs	r3, #1
 800410e:	e7f0      	b.n	80040f2 <_vfiprintf_r+0x1da>
 8004110:	ab03      	add	r3, sp, #12
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	462a      	mov	r2, r5
 8004116:	4b16      	ldr	r3, [pc, #88]	; (8004170 <_vfiprintf_r+0x258>)
 8004118:	a904      	add	r1, sp, #16
 800411a:	4630      	mov	r0, r6
 800411c:	f3af 8000 	nop.w
 8004120:	4607      	mov	r7, r0
 8004122:	1c78      	adds	r0, r7, #1
 8004124:	d1d6      	bne.n	80040d4 <_vfiprintf_r+0x1bc>
 8004126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004128:	07d9      	lsls	r1, r3, #31
 800412a:	d405      	bmi.n	8004138 <_vfiprintf_r+0x220>
 800412c:	89ab      	ldrh	r3, [r5, #12]
 800412e:	059a      	lsls	r2, r3, #22
 8004130:	d402      	bmi.n	8004138 <_vfiprintf_r+0x220>
 8004132:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004134:	f000 fc45 	bl	80049c2 <__retarget_lock_release_recursive>
 8004138:	89ab      	ldrh	r3, [r5, #12]
 800413a:	065b      	lsls	r3, r3, #25
 800413c:	f53f af12 	bmi.w	8003f64 <_vfiprintf_r+0x4c>
 8004140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004142:	e711      	b.n	8003f68 <_vfiprintf_r+0x50>
 8004144:	ab03      	add	r3, sp, #12
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	462a      	mov	r2, r5
 800414a:	4b09      	ldr	r3, [pc, #36]	; (8004170 <_vfiprintf_r+0x258>)
 800414c:	a904      	add	r1, sp, #16
 800414e:	4630      	mov	r0, r6
 8004150:	f000 f880 	bl	8004254 <_printf_i>
 8004154:	e7e4      	b.n	8004120 <_vfiprintf_r+0x208>
 8004156:	bf00      	nop
 8004158:	08005074 	.word	0x08005074
 800415c:	08005094 	.word	0x08005094
 8004160:	08005054 	.word	0x08005054
 8004164:	0800501e 	.word	0x0800501e
 8004168:	08005028 	.word	0x08005028
 800416c:	00000000 	.word	0x00000000
 8004170:	08003ef3 	.word	0x08003ef3
 8004174:	08005024 	.word	0x08005024

08004178 <_printf_common>:
 8004178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800417c:	4616      	mov	r6, r2
 800417e:	4699      	mov	r9, r3
 8004180:	688a      	ldr	r2, [r1, #8]
 8004182:	690b      	ldr	r3, [r1, #16]
 8004184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004188:	4293      	cmp	r3, r2
 800418a:	bfb8      	it	lt
 800418c:	4613      	movlt	r3, r2
 800418e:	6033      	str	r3, [r6, #0]
 8004190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004194:	4607      	mov	r7, r0
 8004196:	460c      	mov	r4, r1
 8004198:	b10a      	cbz	r2, 800419e <_printf_common+0x26>
 800419a:	3301      	adds	r3, #1
 800419c:	6033      	str	r3, [r6, #0]
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	0699      	lsls	r1, r3, #26
 80041a2:	bf42      	ittt	mi
 80041a4:	6833      	ldrmi	r3, [r6, #0]
 80041a6:	3302      	addmi	r3, #2
 80041a8:	6033      	strmi	r3, [r6, #0]
 80041aa:	6825      	ldr	r5, [r4, #0]
 80041ac:	f015 0506 	ands.w	r5, r5, #6
 80041b0:	d106      	bne.n	80041c0 <_printf_common+0x48>
 80041b2:	f104 0a19 	add.w	sl, r4, #25
 80041b6:	68e3      	ldr	r3, [r4, #12]
 80041b8:	6832      	ldr	r2, [r6, #0]
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	42ab      	cmp	r3, r5
 80041be:	dc26      	bgt.n	800420e <_printf_common+0x96>
 80041c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041c4:	1e13      	subs	r3, r2, #0
 80041c6:	6822      	ldr	r2, [r4, #0]
 80041c8:	bf18      	it	ne
 80041ca:	2301      	movne	r3, #1
 80041cc:	0692      	lsls	r2, r2, #26
 80041ce:	d42b      	bmi.n	8004228 <_printf_common+0xb0>
 80041d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041d4:	4649      	mov	r1, r9
 80041d6:	4638      	mov	r0, r7
 80041d8:	47c0      	blx	r8
 80041da:	3001      	adds	r0, #1
 80041dc:	d01e      	beq.n	800421c <_printf_common+0xa4>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	68e5      	ldr	r5, [r4, #12]
 80041e2:	6832      	ldr	r2, [r6, #0]
 80041e4:	f003 0306 	and.w	r3, r3, #6
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	bf08      	it	eq
 80041ec:	1aad      	subeq	r5, r5, r2
 80041ee:	68a3      	ldr	r3, [r4, #8]
 80041f0:	6922      	ldr	r2, [r4, #16]
 80041f2:	bf0c      	ite	eq
 80041f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041f8:	2500      	movne	r5, #0
 80041fa:	4293      	cmp	r3, r2
 80041fc:	bfc4      	itt	gt
 80041fe:	1a9b      	subgt	r3, r3, r2
 8004200:	18ed      	addgt	r5, r5, r3
 8004202:	2600      	movs	r6, #0
 8004204:	341a      	adds	r4, #26
 8004206:	42b5      	cmp	r5, r6
 8004208:	d11a      	bne.n	8004240 <_printf_common+0xc8>
 800420a:	2000      	movs	r0, #0
 800420c:	e008      	b.n	8004220 <_printf_common+0xa8>
 800420e:	2301      	movs	r3, #1
 8004210:	4652      	mov	r2, sl
 8004212:	4649      	mov	r1, r9
 8004214:	4638      	mov	r0, r7
 8004216:	47c0      	blx	r8
 8004218:	3001      	adds	r0, #1
 800421a:	d103      	bne.n	8004224 <_printf_common+0xac>
 800421c:	f04f 30ff 	mov.w	r0, #4294967295
 8004220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004224:	3501      	adds	r5, #1
 8004226:	e7c6      	b.n	80041b6 <_printf_common+0x3e>
 8004228:	18e1      	adds	r1, r4, r3
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	2030      	movs	r0, #48	; 0x30
 800422e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004232:	4422      	add	r2, r4
 8004234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800423c:	3302      	adds	r3, #2
 800423e:	e7c7      	b.n	80041d0 <_printf_common+0x58>
 8004240:	2301      	movs	r3, #1
 8004242:	4622      	mov	r2, r4
 8004244:	4649      	mov	r1, r9
 8004246:	4638      	mov	r0, r7
 8004248:	47c0      	blx	r8
 800424a:	3001      	adds	r0, #1
 800424c:	d0e6      	beq.n	800421c <_printf_common+0xa4>
 800424e:	3601      	adds	r6, #1
 8004250:	e7d9      	b.n	8004206 <_printf_common+0x8e>
	...

08004254 <_printf_i>:
 8004254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	7e0f      	ldrb	r7, [r1, #24]
 800425a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800425c:	2f78      	cmp	r7, #120	; 0x78
 800425e:	4691      	mov	r9, r2
 8004260:	4680      	mov	r8, r0
 8004262:	460c      	mov	r4, r1
 8004264:	469a      	mov	sl, r3
 8004266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800426a:	d807      	bhi.n	800427c <_printf_i+0x28>
 800426c:	2f62      	cmp	r7, #98	; 0x62
 800426e:	d80a      	bhi.n	8004286 <_printf_i+0x32>
 8004270:	2f00      	cmp	r7, #0
 8004272:	f000 80d8 	beq.w	8004426 <_printf_i+0x1d2>
 8004276:	2f58      	cmp	r7, #88	; 0x58
 8004278:	f000 80a3 	beq.w	80043c2 <_printf_i+0x16e>
 800427c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004284:	e03a      	b.n	80042fc <_printf_i+0xa8>
 8004286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800428a:	2b15      	cmp	r3, #21
 800428c:	d8f6      	bhi.n	800427c <_printf_i+0x28>
 800428e:	a101      	add	r1, pc, #4	; (adr r1, 8004294 <_printf_i+0x40>)
 8004290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004294:	080042ed 	.word	0x080042ed
 8004298:	08004301 	.word	0x08004301
 800429c:	0800427d 	.word	0x0800427d
 80042a0:	0800427d 	.word	0x0800427d
 80042a4:	0800427d 	.word	0x0800427d
 80042a8:	0800427d 	.word	0x0800427d
 80042ac:	08004301 	.word	0x08004301
 80042b0:	0800427d 	.word	0x0800427d
 80042b4:	0800427d 	.word	0x0800427d
 80042b8:	0800427d 	.word	0x0800427d
 80042bc:	0800427d 	.word	0x0800427d
 80042c0:	0800440d 	.word	0x0800440d
 80042c4:	08004331 	.word	0x08004331
 80042c8:	080043ef 	.word	0x080043ef
 80042cc:	0800427d 	.word	0x0800427d
 80042d0:	0800427d 	.word	0x0800427d
 80042d4:	0800442f 	.word	0x0800442f
 80042d8:	0800427d 	.word	0x0800427d
 80042dc:	08004331 	.word	0x08004331
 80042e0:	0800427d 	.word	0x0800427d
 80042e4:	0800427d 	.word	0x0800427d
 80042e8:	080043f7 	.word	0x080043f7
 80042ec:	682b      	ldr	r3, [r5, #0]
 80042ee:	1d1a      	adds	r2, r3, #4
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	602a      	str	r2, [r5, #0]
 80042f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0a3      	b.n	8004448 <_printf_i+0x1f4>
 8004300:	6820      	ldr	r0, [r4, #0]
 8004302:	6829      	ldr	r1, [r5, #0]
 8004304:	0606      	lsls	r6, r0, #24
 8004306:	f101 0304 	add.w	r3, r1, #4
 800430a:	d50a      	bpl.n	8004322 <_printf_i+0xce>
 800430c:	680e      	ldr	r6, [r1, #0]
 800430e:	602b      	str	r3, [r5, #0]
 8004310:	2e00      	cmp	r6, #0
 8004312:	da03      	bge.n	800431c <_printf_i+0xc8>
 8004314:	232d      	movs	r3, #45	; 0x2d
 8004316:	4276      	negs	r6, r6
 8004318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800431c:	485e      	ldr	r0, [pc, #376]	; (8004498 <_printf_i+0x244>)
 800431e:	230a      	movs	r3, #10
 8004320:	e019      	b.n	8004356 <_printf_i+0x102>
 8004322:	680e      	ldr	r6, [r1, #0]
 8004324:	602b      	str	r3, [r5, #0]
 8004326:	f010 0f40 	tst.w	r0, #64	; 0x40
 800432a:	bf18      	it	ne
 800432c:	b236      	sxthne	r6, r6
 800432e:	e7ef      	b.n	8004310 <_printf_i+0xbc>
 8004330:	682b      	ldr	r3, [r5, #0]
 8004332:	6820      	ldr	r0, [r4, #0]
 8004334:	1d19      	adds	r1, r3, #4
 8004336:	6029      	str	r1, [r5, #0]
 8004338:	0601      	lsls	r1, r0, #24
 800433a:	d501      	bpl.n	8004340 <_printf_i+0xec>
 800433c:	681e      	ldr	r6, [r3, #0]
 800433e:	e002      	b.n	8004346 <_printf_i+0xf2>
 8004340:	0646      	lsls	r6, r0, #25
 8004342:	d5fb      	bpl.n	800433c <_printf_i+0xe8>
 8004344:	881e      	ldrh	r6, [r3, #0]
 8004346:	4854      	ldr	r0, [pc, #336]	; (8004498 <_printf_i+0x244>)
 8004348:	2f6f      	cmp	r7, #111	; 0x6f
 800434a:	bf0c      	ite	eq
 800434c:	2308      	moveq	r3, #8
 800434e:	230a      	movne	r3, #10
 8004350:	2100      	movs	r1, #0
 8004352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004356:	6865      	ldr	r5, [r4, #4]
 8004358:	60a5      	str	r5, [r4, #8]
 800435a:	2d00      	cmp	r5, #0
 800435c:	bfa2      	ittt	ge
 800435e:	6821      	ldrge	r1, [r4, #0]
 8004360:	f021 0104 	bicge.w	r1, r1, #4
 8004364:	6021      	strge	r1, [r4, #0]
 8004366:	b90e      	cbnz	r6, 800436c <_printf_i+0x118>
 8004368:	2d00      	cmp	r5, #0
 800436a:	d04d      	beq.n	8004408 <_printf_i+0x1b4>
 800436c:	4615      	mov	r5, r2
 800436e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004372:	fb03 6711 	mls	r7, r3, r1, r6
 8004376:	5dc7      	ldrb	r7, [r0, r7]
 8004378:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800437c:	4637      	mov	r7, r6
 800437e:	42bb      	cmp	r3, r7
 8004380:	460e      	mov	r6, r1
 8004382:	d9f4      	bls.n	800436e <_printf_i+0x11a>
 8004384:	2b08      	cmp	r3, #8
 8004386:	d10b      	bne.n	80043a0 <_printf_i+0x14c>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	07de      	lsls	r6, r3, #31
 800438c:	d508      	bpl.n	80043a0 <_printf_i+0x14c>
 800438e:	6923      	ldr	r3, [r4, #16]
 8004390:	6861      	ldr	r1, [r4, #4]
 8004392:	4299      	cmp	r1, r3
 8004394:	bfde      	ittt	le
 8004396:	2330      	movle	r3, #48	; 0x30
 8004398:	f805 3c01 	strble.w	r3, [r5, #-1]
 800439c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043a0:	1b52      	subs	r2, r2, r5
 80043a2:	6122      	str	r2, [r4, #16]
 80043a4:	f8cd a000 	str.w	sl, [sp]
 80043a8:	464b      	mov	r3, r9
 80043aa:	aa03      	add	r2, sp, #12
 80043ac:	4621      	mov	r1, r4
 80043ae:	4640      	mov	r0, r8
 80043b0:	f7ff fee2 	bl	8004178 <_printf_common>
 80043b4:	3001      	adds	r0, #1
 80043b6:	d14c      	bne.n	8004452 <_printf_i+0x1fe>
 80043b8:	f04f 30ff 	mov.w	r0, #4294967295
 80043bc:	b004      	add	sp, #16
 80043be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c2:	4835      	ldr	r0, [pc, #212]	; (8004498 <_printf_i+0x244>)
 80043c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043c8:	6829      	ldr	r1, [r5, #0]
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80043d0:	6029      	str	r1, [r5, #0]
 80043d2:	061d      	lsls	r5, r3, #24
 80043d4:	d514      	bpl.n	8004400 <_printf_i+0x1ac>
 80043d6:	07df      	lsls	r7, r3, #31
 80043d8:	bf44      	itt	mi
 80043da:	f043 0320 	orrmi.w	r3, r3, #32
 80043de:	6023      	strmi	r3, [r4, #0]
 80043e0:	b91e      	cbnz	r6, 80043ea <_printf_i+0x196>
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	f023 0320 	bic.w	r3, r3, #32
 80043e8:	6023      	str	r3, [r4, #0]
 80043ea:	2310      	movs	r3, #16
 80043ec:	e7b0      	b.n	8004350 <_printf_i+0xfc>
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	f043 0320 	orr.w	r3, r3, #32
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	2378      	movs	r3, #120	; 0x78
 80043f8:	4828      	ldr	r0, [pc, #160]	; (800449c <_printf_i+0x248>)
 80043fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043fe:	e7e3      	b.n	80043c8 <_printf_i+0x174>
 8004400:	0659      	lsls	r1, r3, #25
 8004402:	bf48      	it	mi
 8004404:	b2b6      	uxthmi	r6, r6
 8004406:	e7e6      	b.n	80043d6 <_printf_i+0x182>
 8004408:	4615      	mov	r5, r2
 800440a:	e7bb      	b.n	8004384 <_printf_i+0x130>
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	6826      	ldr	r6, [r4, #0]
 8004410:	6961      	ldr	r1, [r4, #20]
 8004412:	1d18      	adds	r0, r3, #4
 8004414:	6028      	str	r0, [r5, #0]
 8004416:	0635      	lsls	r5, r6, #24
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	d501      	bpl.n	8004420 <_printf_i+0x1cc>
 800441c:	6019      	str	r1, [r3, #0]
 800441e:	e002      	b.n	8004426 <_printf_i+0x1d2>
 8004420:	0670      	lsls	r0, r6, #25
 8004422:	d5fb      	bpl.n	800441c <_printf_i+0x1c8>
 8004424:	8019      	strh	r1, [r3, #0]
 8004426:	2300      	movs	r3, #0
 8004428:	6123      	str	r3, [r4, #16]
 800442a:	4615      	mov	r5, r2
 800442c:	e7ba      	b.n	80043a4 <_printf_i+0x150>
 800442e:	682b      	ldr	r3, [r5, #0]
 8004430:	1d1a      	adds	r2, r3, #4
 8004432:	602a      	str	r2, [r5, #0]
 8004434:	681d      	ldr	r5, [r3, #0]
 8004436:	6862      	ldr	r2, [r4, #4]
 8004438:	2100      	movs	r1, #0
 800443a:	4628      	mov	r0, r5
 800443c:	f7fb fed0 	bl	80001e0 <memchr>
 8004440:	b108      	cbz	r0, 8004446 <_printf_i+0x1f2>
 8004442:	1b40      	subs	r0, r0, r5
 8004444:	6060      	str	r0, [r4, #4]
 8004446:	6863      	ldr	r3, [r4, #4]
 8004448:	6123      	str	r3, [r4, #16]
 800444a:	2300      	movs	r3, #0
 800444c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004450:	e7a8      	b.n	80043a4 <_printf_i+0x150>
 8004452:	6923      	ldr	r3, [r4, #16]
 8004454:	462a      	mov	r2, r5
 8004456:	4649      	mov	r1, r9
 8004458:	4640      	mov	r0, r8
 800445a:	47d0      	blx	sl
 800445c:	3001      	adds	r0, #1
 800445e:	d0ab      	beq.n	80043b8 <_printf_i+0x164>
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	079b      	lsls	r3, r3, #30
 8004464:	d413      	bmi.n	800448e <_printf_i+0x23a>
 8004466:	68e0      	ldr	r0, [r4, #12]
 8004468:	9b03      	ldr	r3, [sp, #12]
 800446a:	4298      	cmp	r0, r3
 800446c:	bfb8      	it	lt
 800446e:	4618      	movlt	r0, r3
 8004470:	e7a4      	b.n	80043bc <_printf_i+0x168>
 8004472:	2301      	movs	r3, #1
 8004474:	4632      	mov	r2, r6
 8004476:	4649      	mov	r1, r9
 8004478:	4640      	mov	r0, r8
 800447a:	47d0      	blx	sl
 800447c:	3001      	adds	r0, #1
 800447e:	d09b      	beq.n	80043b8 <_printf_i+0x164>
 8004480:	3501      	adds	r5, #1
 8004482:	68e3      	ldr	r3, [r4, #12]
 8004484:	9903      	ldr	r1, [sp, #12]
 8004486:	1a5b      	subs	r3, r3, r1
 8004488:	42ab      	cmp	r3, r5
 800448a:	dcf2      	bgt.n	8004472 <_printf_i+0x21e>
 800448c:	e7eb      	b.n	8004466 <_printf_i+0x212>
 800448e:	2500      	movs	r5, #0
 8004490:	f104 0619 	add.w	r6, r4, #25
 8004494:	e7f5      	b.n	8004482 <_printf_i+0x22e>
 8004496:	bf00      	nop
 8004498:	0800502f 	.word	0x0800502f
 800449c:	08005040 	.word	0x08005040

080044a0 <_sbrk_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	4d06      	ldr	r5, [pc, #24]	; (80044bc <_sbrk_r+0x1c>)
 80044a4:	2300      	movs	r3, #0
 80044a6:	4604      	mov	r4, r0
 80044a8:	4608      	mov	r0, r1
 80044aa:	602b      	str	r3, [r5, #0]
 80044ac:	f7fd f9e6 	bl	800187c <_sbrk>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d102      	bne.n	80044ba <_sbrk_r+0x1a>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	b103      	cbz	r3, 80044ba <_sbrk_r+0x1a>
 80044b8:	6023      	str	r3, [r4, #0]
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	20003c54 	.word	0x20003c54

080044c0 <__swbuf_r>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	460e      	mov	r6, r1
 80044c4:	4614      	mov	r4, r2
 80044c6:	4605      	mov	r5, r0
 80044c8:	b118      	cbz	r0, 80044d2 <__swbuf_r+0x12>
 80044ca:	6983      	ldr	r3, [r0, #24]
 80044cc:	b90b      	cbnz	r3, 80044d2 <__swbuf_r+0x12>
 80044ce:	f000 f9d9 	bl	8004884 <__sinit>
 80044d2:	4b21      	ldr	r3, [pc, #132]	; (8004558 <__swbuf_r+0x98>)
 80044d4:	429c      	cmp	r4, r3
 80044d6:	d12b      	bne.n	8004530 <__swbuf_r+0x70>
 80044d8:	686c      	ldr	r4, [r5, #4]
 80044da:	69a3      	ldr	r3, [r4, #24]
 80044dc:	60a3      	str	r3, [r4, #8]
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	071a      	lsls	r2, r3, #28
 80044e2:	d52f      	bpl.n	8004544 <__swbuf_r+0x84>
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	b36b      	cbz	r3, 8004544 <__swbuf_r+0x84>
 80044e8:	6923      	ldr	r3, [r4, #16]
 80044ea:	6820      	ldr	r0, [r4, #0]
 80044ec:	1ac0      	subs	r0, r0, r3
 80044ee:	6963      	ldr	r3, [r4, #20]
 80044f0:	b2f6      	uxtb	r6, r6
 80044f2:	4283      	cmp	r3, r0
 80044f4:	4637      	mov	r7, r6
 80044f6:	dc04      	bgt.n	8004502 <__swbuf_r+0x42>
 80044f8:	4621      	mov	r1, r4
 80044fa:	4628      	mov	r0, r5
 80044fc:	f000 f92e 	bl	800475c <_fflush_r>
 8004500:	bb30      	cbnz	r0, 8004550 <__swbuf_r+0x90>
 8004502:	68a3      	ldr	r3, [r4, #8]
 8004504:	3b01      	subs	r3, #1
 8004506:	60a3      	str	r3, [r4, #8]
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	6022      	str	r2, [r4, #0]
 800450e:	701e      	strb	r6, [r3, #0]
 8004510:	6963      	ldr	r3, [r4, #20]
 8004512:	3001      	adds	r0, #1
 8004514:	4283      	cmp	r3, r0
 8004516:	d004      	beq.n	8004522 <__swbuf_r+0x62>
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	07db      	lsls	r3, r3, #31
 800451c:	d506      	bpl.n	800452c <__swbuf_r+0x6c>
 800451e:	2e0a      	cmp	r6, #10
 8004520:	d104      	bne.n	800452c <__swbuf_r+0x6c>
 8004522:	4621      	mov	r1, r4
 8004524:	4628      	mov	r0, r5
 8004526:	f000 f919 	bl	800475c <_fflush_r>
 800452a:	b988      	cbnz	r0, 8004550 <__swbuf_r+0x90>
 800452c:	4638      	mov	r0, r7
 800452e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <__swbuf_r+0x9c>)
 8004532:	429c      	cmp	r4, r3
 8004534:	d101      	bne.n	800453a <__swbuf_r+0x7a>
 8004536:	68ac      	ldr	r4, [r5, #8]
 8004538:	e7cf      	b.n	80044da <__swbuf_r+0x1a>
 800453a:	4b09      	ldr	r3, [pc, #36]	; (8004560 <__swbuf_r+0xa0>)
 800453c:	429c      	cmp	r4, r3
 800453e:	bf08      	it	eq
 8004540:	68ec      	ldreq	r4, [r5, #12]
 8004542:	e7ca      	b.n	80044da <__swbuf_r+0x1a>
 8004544:	4621      	mov	r1, r4
 8004546:	4628      	mov	r0, r5
 8004548:	f000 f80c 	bl	8004564 <__swsetup_r>
 800454c:	2800      	cmp	r0, #0
 800454e:	d0cb      	beq.n	80044e8 <__swbuf_r+0x28>
 8004550:	f04f 37ff 	mov.w	r7, #4294967295
 8004554:	e7ea      	b.n	800452c <__swbuf_r+0x6c>
 8004556:	bf00      	nop
 8004558:	08005074 	.word	0x08005074
 800455c:	08005094 	.word	0x08005094
 8004560:	08005054 	.word	0x08005054

08004564 <__swsetup_r>:
 8004564:	4b32      	ldr	r3, [pc, #200]	; (8004630 <__swsetup_r+0xcc>)
 8004566:	b570      	push	{r4, r5, r6, lr}
 8004568:	681d      	ldr	r5, [r3, #0]
 800456a:	4606      	mov	r6, r0
 800456c:	460c      	mov	r4, r1
 800456e:	b125      	cbz	r5, 800457a <__swsetup_r+0x16>
 8004570:	69ab      	ldr	r3, [r5, #24]
 8004572:	b913      	cbnz	r3, 800457a <__swsetup_r+0x16>
 8004574:	4628      	mov	r0, r5
 8004576:	f000 f985 	bl	8004884 <__sinit>
 800457a:	4b2e      	ldr	r3, [pc, #184]	; (8004634 <__swsetup_r+0xd0>)
 800457c:	429c      	cmp	r4, r3
 800457e:	d10f      	bne.n	80045a0 <__swsetup_r+0x3c>
 8004580:	686c      	ldr	r4, [r5, #4]
 8004582:	89a3      	ldrh	r3, [r4, #12]
 8004584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004588:	0719      	lsls	r1, r3, #28
 800458a:	d42c      	bmi.n	80045e6 <__swsetup_r+0x82>
 800458c:	06dd      	lsls	r5, r3, #27
 800458e:	d411      	bmi.n	80045b4 <__swsetup_r+0x50>
 8004590:	2309      	movs	r3, #9
 8004592:	6033      	str	r3, [r6, #0]
 8004594:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004598:	81a3      	strh	r3, [r4, #12]
 800459a:	f04f 30ff 	mov.w	r0, #4294967295
 800459e:	e03e      	b.n	800461e <__swsetup_r+0xba>
 80045a0:	4b25      	ldr	r3, [pc, #148]	; (8004638 <__swsetup_r+0xd4>)
 80045a2:	429c      	cmp	r4, r3
 80045a4:	d101      	bne.n	80045aa <__swsetup_r+0x46>
 80045a6:	68ac      	ldr	r4, [r5, #8]
 80045a8:	e7eb      	b.n	8004582 <__swsetup_r+0x1e>
 80045aa:	4b24      	ldr	r3, [pc, #144]	; (800463c <__swsetup_r+0xd8>)
 80045ac:	429c      	cmp	r4, r3
 80045ae:	bf08      	it	eq
 80045b0:	68ec      	ldreq	r4, [r5, #12]
 80045b2:	e7e6      	b.n	8004582 <__swsetup_r+0x1e>
 80045b4:	0758      	lsls	r0, r3, #29
 80045b6:	d512      	bpl.n	80045de <__swsetup_r+0x7a>
 80045b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045ba:	b141      	cbz	r1, 80045ce <__swsetup_r+0x6a>
 80045bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045c0:	4299      	cmp	r1, r3
 80045c2:	d002      	beq.n	80045ca <__swsetup_r+0x66>
 80045c4:	4630      	mov	r0, r6
 80045c6:	f7ff fb9d 	bl	8003d04 <_free_r>
 80045ca:	2300      	movs	r3, #0
 80045cc:	6363      	str	r3, [r4, #52]	; 0x34
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045d4:	81a3      	strh	r3, [r4, #12]
 80045d6:	2300      	movs	r3, #0
 80045d8:	6063      	str	r3, [r4, #4]
 80045da:	6923      	ldr	r3, [r4, #16]
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	f043 0308 	orr.w	r3, r3, #8
 80045e4:	81a3      	strh	r3, [r4, #12]
 80045e6:	6923      	ldr	r3, [r4, #16]
 80045e8:	b94b      	cbnz	r3, 80045fe <__swsetup_r+0x9a>
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f4:	d003      	beq.n	80045fe <__swsetup_r+0x9a>
 80045f6:	4621      	mov	r1, r4
 80045f8:	4630      	mov	r0, r6
 80045fa:	f000 fa09 	bl	8004a10 <__smakebuf_r>
 80045fe:	89a0      	ldrh	r0, [r4, #12]
 8004600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004604:	f010 0301 	ands.w	r3, r0, #1
 8004608:	d00a      	beq.n	8004620 <__swsetup_r+0xbc>
 800460a:	2300      	movs	r3, #0
 800460c:	60a3      	str	r3, [r4, #8]
 800460e:	6963      	ldr	r3, [r4, #20]
 8004610:	425b      	negs	r3, r3
 8004612:	61a3      	str	r3, [r4, #24]
 8004614:	6923      	ldr	r3, [r4, #16]
 8004616:	b943      	cbnz	r3, 800462a <__swsetup_r+0xc6>
 8004618:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800461c:	d1ba      	bne.n	8004594 <__swsetup_r+0x30>
 800461e:	bd70      	pop	{r4, r5, r6, pc}
 8004620:	0781      	lsls	r1, r0, #30
 8004622:	bf58      	it	pl
 8004624:	6963      	ldrpl	r3, [r4, #20]
 8004626:	60a3      	str	r3, [r4, #8]
 8004628:	e7f4      	b.n	8004614 <__swsetup_r+0xb0>
 800462a:	2000      	movs	r0, #0
 800462c:	e7f7      	b.n	800461e <__swsetup_r+0xba>
 800462e:	bf00      	nop
 8004630:	2000000c 	.word	0x2000000c
 8004634:	08005074 	.word	0x08005074
 8004638:	08005094 	.word	0x08005094
 800463c:	08005054 	.word	0x08005054

08004640 <abort>:
 8004640:	b508      	push	{r3, lr}
 8004642:	2006      	movs	r0, #6
 8004644:	f000 fa58 	bl	8004af8 <raise>
 8004648:	2001      	movs	r0, #1
 800464a:	f7fd f89f 	bl	800178c <_exit>
	...

08004650 <__sflush_r>:
 8004650:	898a      	ldrh	r2, [r1, #12]
 8004652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004656:	4605      	mov	r5, r0
 8004658:	0710      	lsls	r0, r2, #28
 800465a:	460c      	mov	r4, r1
 800465c:	d458      	bmi.n	8004710 <__sflush_r+0xc0>
 800465e:	684b      	ldr	r3, [r1, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	dc05      	bgt.n	8004670 <__sflush_r+0x20>
 8004664:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	dc02      	bgt.n	8004670 <__sflush_r+0x20>
 800466a:	2000      	movs	r0, #0
 800466c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004672:	2e00      	cmp	r6, #0
 8004674:	d0f9      	beq.n	800466a <__sflush_r+0x1a>
 8004676:	2300      	movs	r3, #0
 8004678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800467c:	682f      	ldr	r7, [r5, #0]
 800467e:	602b      	str	r3, [r5, #0]
 8004680:	d032      	beq.n	80046e8 <__sflush_r+0x98>
 8004682:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	075a      	lsls	r2, r3, #29
 8004688:	d505      	bpl.n	8004696 <__sflush_r+0x46>
 800468a:	6863      	ldr	r3, [r4, #4]
 800468c:	1ac0      	subs	r0, r0, r3
 800468e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004690:	b10b      	cbz	r3, 8004696 <__sflush_r+0x46>
 8004692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004694:	1ac0      	subs	r0, r0, r3
 8004696:	2300      	movs	r3, #0
 8004698:	4602      	mov	r2, r0
 800469a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800469c:	6a21      	ldr	r1, [r4, #32]
 800469e:	4628      	mov	r0, r5
 80046a0:	47b0      	blx	r6
 80046a2:	1c43      	adds	r3, r0, #1
 80046a4:	89a3      	ldrh	r3, [r4, #12]
 80046a6:	d106      	bne.n	80046b6 <__sflush_r+0x66>
 80046a8:	6829      	ldr	r1, [r5, #0]
 80046aa:	291d      	cmp	r1, #29
 80046ac:	d82c      	bhi.n	8004708 <__sflush_r+0xb8>
 80046ae:	4a2a      	ldr	r2, [pc, #168]	; (8004758 <__sflush_r+0x108>)
 80046b0:	40ca      	lsrs	r2, r1
 80046b2:	07d6      	lsls	r6, r2, #31
 80046b4:	d528      	bpl.n	8004708 <__sflush_r+0xb8>
 80046b6:	2200      	movs	r2, #0
 80046b8:	6062      	str	r2, [r4, #4]
 80046ba:	04d9      	lsls	r1, r3, #19
 80046bc:	6922      	ldr	r2, [r4, #16]
 80046be:	6022      	str	r2, [r4, #0]
 80046c0:	d504      	bpl.n	80046cc <__sflush_r+0x7c>
 80046c2:	1c42      	adds	r2, r0, #1
 80046c4:	d101      	bne.n	80046ca <__sflush_r+0x7a>
 80046c6:	682b      	ldr	r3, [r5, #0]
 80046c8:	b903      	cbnz	r3, 80046cc <__sflush_r+0x7c>
 80046ca:	6560      	str	r0, [r4, #84]	; 0x54
 80046cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046ce:	602f      	str	r7, [r5, #0]
 80046d0:	2900      	cmp	r1, #0
 80046d2:	d0ca      	beq.n	800466a <__sflush_r+0x1a>
 80046d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046d8:	4299      	cmp	r1, r3
 80046da:	d002      	beq.n	80046e2 <__sflush_r+0x92>
 80046dc:	4628      	mov	r0, r5
 80046de:	f7ff fb11 	bl	8003d04 <_free_r>
 80046e2:	2000      	movs	r0, #0
 80046e4:	6360      	str	r0, [r4, #52]	; 0x34
 80046e6:	e7c1      	b.n	800466c <__sflush_r+0x1c>
 80046e8:	6a21      	ldr	r1, [r4, #32]
 80046ea:	2301      	movs	r3, #1
 80046ec:	4628      	mov	r0, r5
 80046ee:	47b0      	blx	r6
 80046f0:	1c41      	adds	r1, r0, #1
 80046f2:	d1c7      	bne.n	8004684 <__sflush_r+0x34>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0c4      	beq.n	8004684 <__sflush_r+0x34>
 80046fa:	2b1d      	cmp	r3, #29
 80046fc:	d001      	beq.n	8004702 <__sflush_r+0xb2>
 80046fe:	2b16      	cmp	r3, #22
 8004700:	d101      	bne.n	8004706 <__sflush_r+0xb6>
 8004702:	602f      	str	r7, [r5, #0]
 8004704:	e7b1      	b.n	800466a <__sflush_r+0x1a>
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800470c:	81a3      	strh	r3, [r4, #12]
 800470e:	e7ad      	b.n	800466c <__sflush_r+0x1c>
 8004710:	690f      	ldr	r7, [r1, #16]
 8004712:	2f00      	cmp	r7, #0
 8004714:	d0a9      	beq.n	800466a <__sflush_r+0x1a>
 8004716:	0793      	lsls	r3, r2, #30
 8004718:	680e      	ldr	r6, [r1, #0]
 800471a:	bf08      	it	eq
 800471c:	694b      	ldreq	r3, [r1, #20]
 800471e:	600f      	str	r7, [r1, #0]
 8004720:	bf18      	it	ne
 8004722:	2300      	movne	r3, #0
 8004724:	eba6 0807 	sub.w	r8, r6, r7
 8004728:	608b      	str	r3, [r1, #8]
 800472a:	f1b8 0f00 	cmp.w	r8, #0
 800472e:	dd9c      	ble.n	800466a <__sflush_r+0x1a>
 8004730:	6a21      	ldr	r1, [r4, #32]
 8004732:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004734:	4643      	mov	r3, r8
 8004736:	463a      	mov	r2, r7
 8004738:	4628      	mov	r0, r5
 800473a:	47b0      	blx	r6
 800473c:	2800      	cmp	r0, #0
 800473e:	dc06      	bgt.n	800474e <__sflush_r+0xfe>
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004746:	81a3      	strh	r3, [r4, #12]
 8004748:	f04f 30ff 	mov.w	r0, #4294967295
 800474c:	e78e      	b.n	800466c <__sflush_r+0x1c>
 800474e:	4407      	add	r7, r0
 8004750:	eba8 0800 	sub.w	r8, r8, r0
 8004754:	e7e9      	b.n	800472a <__sflush_r+0xda>
 8004756:	bf00      	nop
 8004758:	20400001 	.word	0x20400001

0800475c <_fflush_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	690b      	ldr	r3, [r1, #16]
 8004760:	4605      	mov	r5, r0
 8004762:	460c      	mov	r4, r1
 8004764:	b913      	cbnz	r3, 800476c <_fflush_r+0x10>
 8004766:	2500      	movs	r5, #0
 8004768:	4628      	mov	r0, r5
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	b118      	cbz	r0, 8004776 <_fflush_r+0x1a>
 800476e:	6983      	ldr	r3, [r0, #24]
 8004770:	b90b      	cbnz	r3, 8004776 <_fflush_r+0x1a>
 8004772:	f000 f887 	bl	8004884 <__sinit>
 8004776:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <_fflush_r+0x6c>)
 8004778:	429c      	cmp	r4, r3
 800477a:	d11b      	bne.n	80047b4 <_fflush_r+0x58>
 800477c:	686c      	ldr	r4, [r5, #4]
 800477e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0ef      	beq.n	8004766 <_fflush_r+0xa>
 8004786:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004788:	07d0      	lsls	r0, r2, #31
 800478a:	d404      	bmi.n	8004796 <_fflush_r+0x3a>
 800478c:	0599      	lsls	r1, r3, #22
 800478e:	d402      	bmi.n	8004796 <_fflush_r+0x3a>
 8004790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004792:	f000 f915 	bl	80049c0 <__retarget_lock_acquire_recursive>
 8004796:	4628      	mov	r0, r5
 8004798:	4621      	mov	r1, r4
 800479a:	f7ff ff59 	bl	8004650 <__sflush_r>
 800479e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047a0:	07da      	lsls	r2, r3, #31
 80047a2:	4605      	mov	r5, r0
 80047a4:	d4e0      	bmi.n	8004768 <_fflush_r+0xc>
 80047a6:	89a3      	ldrh	r3, [r4, #12]
 80047a8:	059b      	lsls	r3, r3, #22
 80047aa:	d4dd      	bmi.n	8004768 <_fflush_r+0xc>
 80047ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ae:	f000 f908 	bl	80049c2 <__retarget_lock_release_recursive>
 80047b2:	e7d9      	b.n	8004768 <_fflush_r+0xc>
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <_fflush_r+0x70>)
 80047b6:	429c      	cmp	r4, r3
 80047b8:	d101      	bne.n	80047be <_fflush_r+0x62>
 80047ba:	68ac      	ldr	r4, [r5, #8]
 80047bc:	e7df      	b.n	800477e <_fflush_r+0x22>
 80047be:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <_fflush_r+0x74>)
 80047c0:	429c      	cmp	r4, r3
 80047c2:	bf08      	it	eq
 80047c4:	68ec      	ldreq	r4, [r5, #12]
 80047c6:	e7da      	b.n	800477e <_fflush_r+0x22>
 80047c8:	08005074 	.word	0x08005074
 80047cc:	08005094 	.word	0x08005094
 80047d0:	08005054 	.word	0x08005054

080047d4 <std>:
 80047d4:	2300      	movs	r3, #0
 80047d6:	b510      	push	{r4, lr}
 80047d8:	4604      	mov	r4, r0
 80047da:	e9c0 3300 	strd	r3, r3, [r0]
 80047de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047e2:	6083      	str	r3, [r0, #8]
 80047e4:	8181      	strh	r1, [r0, #12]
 80047e6:	6643      	str	r3, [r0, #100]	; 0x64
 80047e8:	81c2      	strh	r2, [r0, #14]
 80047ea:	6183      	str	r3, [r0, #24]
 80047ec:	4619      	mov	r1, r3
 80047ee:	2208      	movs	r2, #8
 80047f0:	305c      	adds	r0, #92	; 0x5c
 80047f2:	f7ff f9db 	bl	8003bac <memset>
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <std+0x38>)
 80047f8:	6263      	str	r3, [r4, #36]	; 0x24
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <std+0x3c>)
 80047fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80047fe:	4b05      	ldr	r3, [pc, #20]	; (8004814 <std+0x40>)
 8004800:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <std+0x44>)
 8004804:	6224      	str	r4, [r4, #32]
 8004806:	6323      	str	r3, [r4, #48]	; 0x30
 8004808:	bd10      	pop	{r4, pc}
 800480a:	bf00      	nop
 800480c:	08004b31 	.word	0x08004b31
 8004810:	08004b53 	.word	0x08004b53
 8004814:	08004b8b 	.word	0x08004b8b
 8004818:	08004baf 	.word	0x08004baf

0800481c <_cleanup_r>:
 800481c:	4901      	ldr	r1, [pc, #4]	; (8004824 <_cleanup_r+0x8>)
 800481e:	f000 b8af 	b.w	8004980 <_fwalk_reent>
 8004822:	bf00      	nop
 8004824:	0800475d 	.word	0x0800475d

08004828 <__sfmoreglue>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	2268      	movs	r2, #104	; 0x68
 800482c:	1e4d      	subs	r5, r1, #1
 800482e:	4355      	muls	r5, r2
 8004830:	460e      	mov	r6, r1
 8004832:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004836:	f7ff fad1 	bl	8003ddc <_malloc_r>
 800483a:	4604      	mov	r4, r0
 800483c:	b140      	cbz	r0, 8004850 <__sfmoreglue+0x28>
 800483e:	2100      	movs	r1, #0
 8004840:	e9c0 1600 	strd	r1, r6, [r0]
 8004844:	300c      	adds	r0, #12
 8004846:	60a0      	str	r0, [r4, #8]
 8004848:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800484c:	f7ff f9ae 	bl	8003bac <memset>
 8004850:	4620      	mov	r0, r4
 8004852:	bd70      	pop	{r4, r5, r6, pc}

08004854 <__sfp_lock_acquire>:
 8004854:	4801      	ldr	r0, [pc, #4]	; (800485c <__sfp_lock_acquire+0x8>)
 8004856:	f000 b8b3 	b.w	80049c0 <__retarget_lock_acquire_recursive>
 800485a:	bf00      	nop
 800485c:	20003c51 	.word	0x20003c51

08004860 <__sfp_lock_release>:
 8004860:	4801      	ldr	r0, [pc, #4]	; (8004868 <__sfp_lock_release+0x8>)
 8004862:	f000 b8ae 	b.w	80049c2 <__retarget_lock_release_recursive>
 8004866:	bf00      	nop
 8004868:	20003c51 	.word	0x20003c51

0800486c <__sinit_lock_acquire>:
 800486c:	4801      	ldr	r0, [pc, #4]	; (8004874 <__sinit_lock_acquire+0x8>)
 800486e:	f000 b8a7 	b.w	80049c0 <__retarget_lock_acquire_recursive>
 8004872:	bf00      	nop
 8004874:	20003c52 	.word	0x20003c52

08004878 <__sinit_lock_release>:
 8004878:	4801      	ldr	r0, [pc, #4]	; (8004880 <__sinit_lock_release+0x8>)
 800487a:	f000 b8a2 	b.w	80049c2 <__retarget_lock_release_recursive>
 800487e:	bf00      	nop
 8004880:	20003c52 	.word	0x20003c52

08004884 <__sinit>:
 8004884:	b510      	push	{r4, lr}
 8004886:	4604      	mov	r4, r0
 8004888:	f7ff fff0 	bl	800486c <__sinit_lock_acquire>
 800488c:	69a3      	ldr	r3, [r4, #24]
 800488e:	b11b      	cbz	r3, 8004898 <__sinit+0x14>
 8004890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004894:	f7ff bff0 	b.w	8004878 <__sinit_lock_release>
 8004898:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800489c:	6523      	str	r3, [r4, #80]	; 0x50
 800489e:	4b13      	ldr	r3, [pc, #76]	; (80048ec <__sinit+0x68>)
 80048a0:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <__sinit+0x6c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80048a6:	42a3      	cmp	r3, r4
 80048a8:	bf04      	itt	eq
 80048aa:	2301      	moveq	r3, #1
 80048ac:	61a3      	streq	r3, [r4, #24]
 80048ae:	4620      	mov	r0, r4
 80048b0:	f000 f820 	bl	80048f4 <__sfp>
 80048b4:	6060      	str	r0, [r4, #4]
 80048b6:	4620      	mov	r0, r4
 80048b8:	f000 f81c 	bl	80048f4 <__sfp>
 80048bc:	60a0      	str	r0, [r4, #8]
 80048be:	4620      	mov	r0, r4
 80048c0:	f000 f818 	bl	80048f4 <__sfp>
 80048c4:	2200      	movs	r2, #0
 80048c6:	60e0      	str	r0, [r4, #12]
 80048c8:	2104      	movs	r1, #4
 80048ca:	6860      	ldr	r0, [r4, #4]
 80048cc:	f7ff ff82 	bl	80047d4 <std>
 80048d0:	68a0      	ldr	r0, [r4, #8]
 80048d2:	2201      	movs	r2, #1
 80048d4:	2109      	movs	r1, #9
 80048d6:	f7ff ff7d 	bl	80047d4 <std>
 80048da:	68e0      	ldr	r0, [r4, #12]
 80048dc:	2202      	movs	r2, #2
 80048de:	2112      	movs	r1, #18
 80048e0:	f7ff ff78 	bl	80047d4 <std>
 80048e4:	2301      	movs	r3, #1
 80048e6:	61a3      	str	r3, [r4, #24]
 80048e8:	e7d2      	b.n	8004890 <__sinit+0xc>
 80048ea:	bf00      	nop
 80048ec:	08004f6c 	.word	0x08004f6c
 80048f0:	0800481d 	.word	0x0800481d

080048f4 <__sfp>:
 80048f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f6:	4607      	mov	r7, r0
 80048f8:	f7ff ffac 	bl	8004854 <__sfp_lock_acquire>
 80048fc:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <__sfp+0x84>)
 80048fe:	681e      	ldr	r6, [r3, #0]
 8004900:	69b3      	ldr	r3, [r6, #24]
 8004902:	b913      	cbnz	r3, 800490a <__sfp+0x16>
 8004904:	4630      	mov	r0, r6
 8004906:	f7ff ffbd 	bl	8004884 <__sinit>
 800490a:	3648      	adds	r6, #72	; 0x48
 800490c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004910:	3b01      	subs	r3, #1
 8004912:	d503      	bpl.n	800491c <__sfp+0x28>
 8004914:	6833      	ldr	r3, [r6, #0]
 8004916:	b30b      	cbz	r3, 800495c <__sfp+0x68>
 8004918:	6836      	ldr	r6, [r6, #0]
 800491a:	e7f7      	b.n	800490c <__sfp+0x18>
 800491c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004920:	b9d5      	cbnz	r5, 8004958 <__sfp+0x64>
 8004922:	4b16      	ldr	r3, [pc, #88]	; (800497c <__sfp+0x88>)
 8004924:	60e3      	str	r3, [r4, #12]
 8004926:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800492a:	6665      	str	r5, [r4, #100]	; 0x64
 800492c:	f000 f847 	bl	80049be <__retarget_lock_init_recursive>
 8004930:	f7ff ff96 	bl	8004860 <__sfp_lock_release>
 8004934:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004938:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800493c:	6025      	str	r5, [r4, #0]
 800493e:	61a5      	str	r5, [r4, #24]
 8004940:	2208      	movs	r2, #8
 8004942:	4629      	mov	r1, r5
 8004944:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004948:	f7ff f930 	bl	8003bac <memset>
 800494c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004950:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004954:	4620      	mov	r0, r4
 8004956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004958:	3468      	adds	r4, #104	; 0x68
 800495a:	e7d9      	b.n	8004910 <__sfp+0x1c>
 800495c:	2104      	movs	r1, #4
 800495e:	4638      	mov	r0, r7
 8004960:	f7ff ff62 	bl	8004828 <__sfmoreglue>
 8004964:	4604      	mov	r4, r0
 8004966:	6030      	str	r0, [r6, #0]
 8004968:	2800      	cmp	r0, #0
 800496a:	d1d5      	bne.n	8004918 <__sfp+0x24>
 800496c:	f7ff ff78 	bl	8004860 <__sfp_lock_release>
 8004970:	230c      	movs	r3, #12
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	e7ee      	b.n	8004954 <__sfp+0x60>
 8004976:	bf00      	nop
 8004978:	08004f6c 	.word	0x08004f6c
 800497c:	ffff0001 	.word	0xffff0001

08004980 <_fwalk_reent>:
 8004980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004984:	4606      	mov	r6, r0
 8004986:	4688      	mov	r8, r1
 8004988:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800498c:	2700      	movs	r7, #0
 800498e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004992:	f1b9 0901 	subs.w	r9, r9, #1
 8004996:	d505      	bpl.n	80049a4 <_fwalk_reent+0x24>
 8004998:	6824      	ldr	r4, [r4, #0]
 800499a:	2c00      	cmp	r4, #0
 800499c:	d1f7      	bne.n	800498e <_fwalk_reent+0xe>
 800499e:	4638      	mov	r0, r7
 80049a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049a4:	89ab      	ldrh	r3, [r5, #12]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d907      	bls.n	80049ba <_fwalk_reent+0x3a>
 80049aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049ae:	3301      	adds	r3, #1
 80049b0:	d003      	beq.n	80049ba <_fwalk_reent+0x3a>
 80049b2:	4629      	mov	r1, r5
 80049b4:	4630      	mov	r0, r6
 80049b6:	47c0      	blx	r8
 80049b8:	4307      	orrs	r7, r0
 80049ba:	3568      	adds	r5, #104	; 0x68
 80049bc:	e7e9      	b.n	8004992 <_fwalk_reent+0x12>

080049be <__retarget_lock_init_recursive>:
 80049be:	4770      	bx	lr

080049c0 <__retarget_lock_acquire_recursive>:
 80049c0:	4770      	bx	lr

080049c2 <__retarget_lock_release_recursive>:
 80049c2:	4770      	bx	lr

080049c4 <__swhatbuf_r>:
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	460e      	mov	r6, r1
 80049c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049cc:	2900      	cmp	r1, #0
 80049ce:	b096      	sub	sp, #88	; 0x58
 80049d0:	4614      	mov	r4, r2
 80049d2:	461d      	mov	r5, r3
 80049d4:	da08      	bge.n	80049e8 <__swhatbuf_r+0x24>
 80049d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	602a      	str	r2, [r5, #0]
 80049de:	061a      	lsls	r2, r3, #24
 80049e0:	d410      	bmi.n	8004a04 <__swhatbuf_r+0x40>
 80049e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049e6:	e00e      	b.n	8004a06 <__swhatbuf_r+0x42>
 80049e8:	466a      	mov	r2, sp
 80049ea:	f000 f907 	bl	8004bfc <_fstat_r>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	dbf1      	blt.n	80049d6 <__swhatbuf_r+0x12>
 80049f2:	9a01      	ldr	r2, [sp, #4]
 80049f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049fc:	425a      	negs	r2, r3
 80049fe:	415a      	adcs	r2, r3
 8004a00:	602a      	str	r2, [r5, #0]
 8004a02:	e7ee      	b.n	80049e2 <__swhatbuf_r+0x1e>
 8004a04:	2340      	movs	r3, #64	; 0x40
 8004a06:	2000      	movs	r0, #0
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	b016      	add	sp, #88	; 0x58
 8004a0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a10 <__smakebuf_r>:
 8004a10:	898b      	ldrh	r3, [r1, #12]
 8004a12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a14:	079d      	lsls	r5, r3, #30
 8004a16:	4606      	mov	r6, r0
 8004a18:	460c      	mov	r4, r1
 8004a1a:	d507      	bpl.n	8004a2c <__smakebuf_r+0x1c>
 8004a1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	6123      	str	r3, [r4, #16]
 8004a24:	2301      	movs	r3, #1
 8004a26:	6163      	str	r3, [r4, #20]
 8004a28:	b002      	add	sp, #8
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	ab01      	add	r3, sp, #4
 8004a2e:	466a      	mov	r2, sp
 8004a30:	f7ff ffc8 	bl	80049c4 <__swhatbuf_r>
 8004a34:	9900      	ldr	r1, [sp, #0]
 8004a36:	4605      	mov	r5, r0
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f7ff f9cf 	bl	8003ddc <_malloc_r>
 8004a3e:	b948      	cbnz	r0, 8004a54 <__smakebuf_r+0x44>
 8004a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a44:	059a      	lsls	r2, r3, #22
 8004a46:	d4ef      	bmi.n	8004a28 <__smakebuf_r+0x18>
 8004a48:	f023 0303 	bic.w	r3, r3, #3
 8004a4c:	f043 0302 	orr.w	r3, r3, #2
 8004a50:	81a3      	strh	r3, [r4, #12]
 8004a52:	e7e3      	b.n	8004a1c <__smakebuf_r+0xc>
 8004a54:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <__smakebuf_r+0x7c>)
 8004a56:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a58:	89a3      	ldrh	r3, [r4, #12]
 8004a5a:	6020      	str	r0, [r4, #0]
 8004a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a60:	81a3      	strh	r3, [r4, #12]
 8004a62:	9b00      	ldr	r3, [sp, #0]
 8004a64:	6163      	str	r3, [r4, #20]
 8004a66:	9b01      	ldr	r3, [sp, #4]
 8004a68:	6120      	str	r0, [r4, #16]
 8004a6a:	b15b      	cbz	r3, 8004a84 <__smakebuf_r+0x74>
 8004a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a70:	4630      	mov	r0, r6
 8004a72:	f000 f8d5 	bl	8004c20 <_isatty_r>
 8004a76:	b128      	cbz	r0, 8004a84 <__smakebuf_r+0x74>
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	f023 0303 	bic.w	r3, r3, #3
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	89a0      	ldrh	r0, [r4, #12]
 8004a86:	4305      	orrs	r5, r0
 8004a88:	81a5      	strh	r5, [r4, #12]
 8004a8a:	e7cd      	b.n	8004a28 <__smakebuf_r+0x18>
 8004a8c:	0800481d 	.word	0x0800481d

08004a90 <__malloc_lock>:
 8004a90:	4801      	ldr	r0, [pc, #4]	; (8004a98 <__malloc_lock+0x8>)
 8004a92:	f7ff bf95 	b.w	80049c0 <__retarget_lock_acquire_recursive>
 8004a96:	bf00      	nop
 8004a98:	20003c50 	.word	0x20003c50

08004a9c <__malloc_unlock>:
 8004a9c:	4801      	ldr	r0, [pc, #4]	; (8004aa4 <__malloc_unlock+0x8>)
 8004a9e:	f7ff bf90 	b.w	80049c2 <__retarget_lock_release_recursive>
 8004aa2:	bf00      	nop
 8004aa4:	20003c50 	.word	0x20003c50

08004aa8 <_raise_r>:
 8004aa8:	291f      	cmp	r1, #31
 8004aaa:	b538      	push	{r3, r4, r5, lr}
 8004aac:	4604      	mov	r4, r0
 8004aae:	460d      	mov	r5, r1
 8004ab0:	d904      	bls.n	8004abc <_raise_r+0x14>
 8004ab2:	2316      	movs	r3, #22
 8004ab4:	6003      	str	r3, [r0, #0]
 8004ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004abe:	b112      	cbz	r2, 8004ac6 <_raise_r+0x1e>
 8004ac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ac4:	b94b      	cbnz	r3, 8004ada <_raise_r+0x32>
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f000 f830 	bl	8004b2c <_getpid_r>
 8004acc:	462a      	mov	r2, r5
 8004ace:	4601      	mov	r1, r0
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ad6:	f000 b817 	b.w	8004b08 <_kill_r>
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d00a      	beq.n	8004af4 <_raise_r+0x4c>
 8004ade:	1c59      	adds	r1, r3, #1
 8004ae0:	d103      	bne.n	8004aea <_raise_r+0x42>
 8004ae2:	2316      	movs	r3, #22
 8004ae4:	6003      	str	r3, [r0, #0]
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	e7e7      	b.n	8004aba <_raise_r+0x12>
 8004aea:	2400      	movs	r4, #0
 8004aec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004af0:	4628      	mov	r0, r5
 8004af2:	4798      	blx	r3
 8004af4:	2000      	movs	r0, #0
 8004af6:	e7e0      	b.n	8004aba <_raise_r+0x12>

08004af8 <raise>:
 8004af8:	4b02      	ldr	r3, [pc, #8]	; (8004b04 <raise+0xc>)
 8004afa:	4601      	mov	r1, r0
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	f7ff bfd3 	b.w	8004aa8 <_raise_r>
 8004b02:	bf00      	nop
 8004b04:	2000000c 	.word	0x2000000c

08004b08 <_kill_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4d07      	ldr	r5, [pc, #28]	; (8004b28 <_kill_r+0x20>)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	4604      	mov	r4, r0
 8004b10:	4608      	mov	r0, r1
 8004b12:	4611      	mov	r1, r2
 8004b14:	602b      	str	r3, [r5, #0]
 8004b16:	f7fc fe29 	bl	800176c <_kill>
 8004b1a:	1c43      	adds	r3, r0, #1
 8004b1c:	d102      	bne.n	8004b24 <_kill_r+0x1c>
 8004b1e:	682b      	ldr	r3, [r5, #0]
 8004b20:	b103      	cbz	r3, 8004b24 <_kill_r+0x1c>
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	bd38      	pop	{r3, r4, r5, pc}
 8004b26:	bf00      	nop
 8004b28:	20003c54 	.word	0x20003c54

08004b2c <_getpid_r>:
 8004b2c:	f7fc be16 	b.w	800175c <_getpid>

08004b30 <__sread>:
 8004b30:	b510      	push	{r4, lr}
 8004b32:	460c      	mov	r4, r1
 8004b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b38:	f000 f894 	bl	8004c64 <_read_r>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	bfab      	itete	ge
 8004b40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b42:	89a3      	ldrhlt	r3, [r4, #12]
 8004b44:	181b      	addge	r3, r3, r0
 8004b46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b4a:	bfac      	ite	ge
 8004b4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b4e:	81a3      	strhlt	r3, [r4, #12]
 8004b50:	bd10      	pop	{r4, pc}

08004b52 <__swrite>:
 8004b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b56:	461f      	mov	r7, r3
 8004b58:	898b      	ldrh	r3, [r1, #12]
 8004b5a:	05db      	lsls	r3, r3, #23
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	460c      	mov	r4, r1
 8004b60:	4616      	mov	r6, r2
 8004b62:	d505      	bpl.n	8004b70 <__swrite+0x1e>
 8004b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b68:	2302      	movs	r3, #2
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f000 f868 	bl	8004c40 <_lseek_r>
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b7a:	81a3      	strh	r3, [r4, #12]
 8004b7c:	4632      	mov	r2, r6
 8004b7e:	463b      	mov	r3, r7
 8004b80:	4628      	mov	r0, r5
 8004b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b86:	f000 b817 	b.w	8004bb8 <_write_r>

08004b8a <__sseek>:
 8004b8a:	b510      	push	{r4, lr}
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b92:	f000 f855 	bl	8004c40 <_lseek_r>
 8004b96:	1c43      	adds	r3, r0, #1
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	bf15      	itete	ne
 8004b9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ba6:	81a3      	strheq	r3, [r4, #12]
 8004ba8:	bf18      	it	ne
 8004baa:	81a3      	strhne	r3, [r4, #12]
 8004bac:	bd10      	pop	{r4, pc}

08004bae <__sclose>:
 8004bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb2:	f000 b813 	b.w	8004bdc <_close_r>
	...

08004bb8 <_write_r>:
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	4d07      	ldr	r5, [pc, #28]	; (8004bd8 <_write_r+0x20>)
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	4608      	mov	r0, r1
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	602a      	str	r2, [r5, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f7fc fe07 	bl	80017da <_write>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d102      	bne.n	8004bd6 <_write_r+0x1e>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	b103      	cbz	r3, 8004bd6 <_write_r+0x1e>
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}
 8004bd8:	20003c54 	.word	0x20003c54

08004bdc <_close_r>:
 8004bdc:	b538      	push	{r3, r4, r5, lr}
 8004bde:	4d06      	ldr	r5, [pc, #24]	; (8004bf8 <_close_r+0x1c>)
 8004be0:	2300      	movs	r3, #0
 8004be2:	4604      	mov	r4, r0
 8004be4:	4608      	mov	r0, r1
 8004be6:	602b      	str	r3, [r5, #0]
 8004be8:	f7fc fe13 	bl	8001812 <_close>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d102      	bne.n	8004bf6 <_close_r+0x1a>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	b103      	cbz	r3, 8004bf6 <_close_r+0x1a>
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	bd38      	pop	{r3, r4, r5, pc}
 8004bf8:	20003c54 	.word	0x20003c54

08004bfc <_fstat_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4d07      	ldr	r5, [pc, #28]	; (8004c1c <_fstat_r+0x20>)
 8004c00:	2300      	movs	r3, #0
 8004c02:	4604      	mov	r4, r0
 8004c04:	4608      	mov	r0, r1
 8004c06:	4611      	mov	r1, r2
 8004c08:	602b      	str	r3, [r5, #0]
 8004c0a:	f7fc fe0e 	bl	800182a <_fstat>
 8004c0e:	1c43      	adds	r3, r0, #1
 8004c10:	d102      	bne.n	8004c18 <_fstat_r+0x1c>
 8004c12:	682b      	ldr	r3, [r5, #0]
 8004c14:	b103      	cbz	r3, 8004c18 <_fstat_r+0x1c>
 8004c16:	6023      	str	r3, [r4, #0]
 8004c18:	bd38      	pop	{r3, r4, r5, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20003c54 	.word	0x20003c54

08004c20 <_isatty_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4d06      	ldr	r5, [pc, #24]	; (8004c3c <_isatty_r+0x1c>)
 8004c24:	2300      	movs	r3, #0
 8004c26:	4604      	mov	r4, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	602b      	str	r3, [r5, #0]
 8004c2c:	f7fc fe0d 	bl	800184a <_isatty>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d102      	bne.n	8004c3a <_isatty_r+0x1a>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <_isatty_r+0x1a>
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	20003c54 	.word	0x20003c54

08004c40 <_lseek_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	4d07      	ldr	r5, [pc, #28]	; (8004c60 <_lseek_r+0x20>)
 8004c44:	4604      	mov	r4, r0
 8004c46:	4608      	mov	r0, r1
 8004c48:	4611      	mov	r1, r2
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	602a      	str	r2, [r5, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f7fc fe06 	bl	8001860 <_lseek>
 8004c54:	1c43      	adds	r3, r0, #1
 8004c56:	d102      	bne.n	8004c5e <_lseek_r+0x1e>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	b103      	cbz	r3, 8004c5e <_lseek_r+0x1e>
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}
 8004c60:	20003c54 	.word	0x20003c54

08004c64 <_read_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4d07      	ldr	r5, [pc, #28]	; (8004c84 <_read_r+0x20>)
 8004c68:	4604      	mov	r4, r0
 8004c6a:	4608      	mov	r0, r1
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	2200      	movs	r2, #0
 8004c70:	602a      	str	r2, [r5, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	f7fc fd94 	bl	80017a0 <_read>
 8004c78:	1c43      	adds	r3, r0, #1
 8004c7a:	d102      	bne.n	8004c82 <_read_r+0x1e>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	b103      	cbz	r3, 8004c82 <_read_r+0x1e>
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	bd38      	pop	{r3, r4, r5, pc}
 8004c84:	20003c54 	.word	0x20003c54

08004c88 <_init>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	bf00      	nop
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr

08004c94 <_fini>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	bf00      	nop
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr
